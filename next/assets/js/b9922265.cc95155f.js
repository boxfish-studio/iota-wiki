"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[45879],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>u});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var c=n.createContext({}),l=function(t){var e=n.useContext(c),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},m=function(t){var e=l(t.components);return n.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),d=l(a),u=r,h=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return a?n.createElement(h,s(s({ref:e},m),{},{components:a})):n.createElement(h,s({ref:e},m))}));function u(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7459:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={keywords:["Rust","Go","TypeScript","WASM","memory space","smart contract state","API","Access","store","state"],description:"IOTA Smart Contracts (ISC) provides a very flexible way of programming smart contracts by providing an API to a sandboxed environment that allows you to interact deterministically and without any security risks with ISC-provided functionality.",image:"/img/wasm_vm/IscHost.png"},s="Introduction to the Wasm VM for ISC",i={unversionedId:"guide/wasm_vm/intro",id:"guide/wasm_vm/intro",title:"Introduction to the Wasm VM for ISC",description:"IOTA Smart Contracts (ISC) provides a very flexible way of programming smart contracts by providing an API to a sandboxed environment that allows you to interact deterministically and without any security risks with ISC-provided functionality.",source:"@site/next/external/wasp/documentation/docs/guide/wasm_vm/intro.mdx",sourceDirName:"guide/wasm_vm",slug:"/guide/wasm_vm/intro",permalink:"/next/smart-contracts/guide/wasm_vm/intro",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/develop/documentation/next/external/wasp/documentation/docs/guide/wasm_vm/intro.mdx",tags:[],version:"current",frontMatter:{keywords:["Rust","Go","TypeScript","WASM","memory space","smart contract state","API","Access","store","state"],description:"IOTA Smart Contracts (ISC) provides a very flexible way of programming smart contracts by providing an API to a sandboxed environment that allows you to interact deterministically and without any security risks with ISC-provided functionality.",image:"/img/wasm_vm/IscHost.png"},sidebar:"tutorialSidebar",previous:{title:"Testnet",permalink:"/next/smart-contracts/guide/chains_and_nodes/testnet"},next:{title:"Smart Contract Concepts",permalink:"/next/smart-contracts/guide/wasm_vm/concepts"}},c={},l=[{value:"Video Tutorial",id:"video-tutorial",level:2}],m={toc:l};function p(t){let{components:e,...o}=t;return(0,r.kt)("wrapper",(0,n.Z)({},m,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction-to-the-wasm-vm-for-isc"},"Introduction to the Wasm VM for ISC"),(0,r.kt)("p",null,"IOTA Smart Contracts (ISC) provides a very flexible way of programming smart contracts by\nproviding an API to a sandboxed environment that allows you to interact deterministically\nand without any security risks with ISC-provided functionality. The API provides a generic\nway to store, access, and modify the state of smart contracts. The API can be used by any\nkind of Virtual Machine (VM) to implement a system to load and run smart contract code on\ntop of ISC. The actual VMs can be implemented by whoever wants to create them."),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(86124).Z},(0,r.kt)("img",{alt:"Wasp node ISC Host",src:a(79191).Z,width:"862",height:"452"}))),(0,r.kt)("p",null,"Of course, we provide an example implementation of such a VM to allow anyone to get a\ntaste of what it is like to program a smart contract for ISC. Our VM implementation uses\n",(0,r.kt)("a",{parentName:"p",href:"https://webassembly.org/"},"WebAssembly")," (Wasm) code as an intermediate compilation target.\nThe implementation of the Wasm VM currently uses the open-source\n",(0,r.kt)("a",{parentName:"p",href:"https://wasmtime.dev/"},"Wasmtime")," runtime environment. The Wasm VM enables dynamic\nloading and running of smart contracts that have been compiled to Wasm code."),(0,r.kt)("p",null,"We chose Wasm to be able to program smart contracts from many programming languages. Since\nmore and more languages are becoming capable of generating the intermediate Wasm code this\nwill eventually allow developers to choose a language they are familiar with."),(0,r.kt)("p",null,"Because each Wasm code unit runs in its own memory space and cannot access anything\noutside that memory by design, Wasm code is ideally suited for secure smart contracts.\nThe Wasm VM runtime system will only provide access to external functionality that is\nnecessary for the smart contracts to be able to do their thing, but nothing more. In our\ncase, we only provide access to the ISC host's sandboxed API environment. The way we do\nthat is by providing a small, self-contained library that can be linked to the Wasm code.\nThis library is called ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmLib"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Wasm VM",src:a(2555).Z,width:"862",height:"452"})),(0,r.kt)("p",null,"As you can see, we can have any number of smart contracts running in our Wasm VM. Each\nsmart contract is a separately compiled Wasm code unit that contains its own copy of\nWasmLib embedded into it. Each WasmLib provides the ISC sandbox functionality to its\ncorresponding smart contract and knows how to use it to access the underlying smart\ncontract state storage through the VM runtime system. This makes the ISC sandbox API\naccess seamless to the smart contract by hiding the details of bridging the gap between\nthe smart contract's memory space, and the otherwise inaccessible memory space of the ISC\nhost."),(0,r.kt)("p",null,"The ISC sandbox environment enables the following functionality:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Access to smart contract metadata"),(0,r.kt)("li",{parentName:"ul"},"Access to request data for smart contract function calls"),(0,r.kt)("li",{parentName:"ul"},"Access to the smart contract state data"),(0,r.kt)("li",{parentName:"ul"},"A way to return result data to the caller of a smart contract function"),(0,r.kt)("li",{parentName:"ul"},"Access to tokens meant for the smart contract, and the ability to move them"),(0,r.kt)("li",{parentName:"ul"},"Ability to initiate or call other smart contract functions"),(0,r.kt)("li",{parentName:"ul"},"Access to logging functionality"),(0,r.kt)("li",{parentName:"ul"},"Access to several utility functions provided by the host")),(0,r.kt)("p",null,"The initial WasmLib implementation was created for the ",(0,r.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"Rust"),"\nprogramming language. Rust had the most advanced and stable support for generating Wasm\ncode at the time when we started implementing our Wasm VM environment. In the meantime,\nwe have also implemented fully functional ",(0,r.kt)("a",{parentName:"p",href:"https://golang.org/"},"Go")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript")," implementations. We currently support the\nfollowing Wasm code generators:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"Wasm code generator"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Go"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://tinygo.org/"},"TinyGo"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Rust"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://rustwasm.github.io/wasm-pack/"},"wasm-pack"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TypeScript"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.assemblyscript.org/"},"AssemblyScript"))))),(0,r.kt)("p",null,"All WasmLib implementations use only a very small common subset of their host language.\nThe same goes for the interface they provide to smart contract writers. This keeps the\ncoding style very similar, barring some syntactic idiosyncrasies. The reason for doing\nthis is that we wanted to make it as easy as possible for anyone to start working with our\nsmart contract system. If you have previous experience in any C-style language you should\nquickly feel comfortable writing smart contracts in any of the supported languages,\nwithout having to dive too deeply into the more esoteric aspects of the chosen language."),(0,r.kt)("p",null,"We will next discuss some ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/wasm_vm/concepts"},(0,r.kt)("inlineCode",{parentName:"a"},"concepts"))," that are central to (ISC) smart\ncontract programming."),(0,r.kt)("h2",{id:"video-tutorial"},"Video Tutorial"),(0,r.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/Yaev4Cu1GW0",title:"Wasm Contract Deploy",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}))}p.isMDXComponent=!0},86124:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/files/IscHost-07dc8036e6e793eb77e66d011e1c3a33.png"},79191:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/IscHost-07dc8036e6e793eb77e66d011e1c3a33.png"},2555:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/WasmVM-434a91f1aeffc650a975d9a5387c4568.png"}}]);