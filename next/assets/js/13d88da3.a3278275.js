"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[28800],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(f,s(s({ref:t},p),{},{components:a})):n.createElement(f,s({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},45503:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i={keywords:["definition","yaml","smart contract creator","one-time","contract generation","datatypes"],description:"the syntax of a schema definition file will be described here.",image:"/img/logo/WASP_logo_dark.png"},s="YAML",o={unversionedId:"guide/wasm_vm/yaml",id:"guide/wasm_vm/yaml",title:"YAML",description:"the syntax of a schema definition file will be described here.",source:"@site/next/external/wasp/documentation/docs/guide/wasm_vm/yaml.mdx",sourceDirName:"guide/wasm_vm",slug:"/guide/wasm_vm/yaml",permalink:"/next/smart-contracts/guide/wasm_vm/yaml",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/develop/documentation/next/external/wasp/documentation/docs/guide/wasm_vm/yaml.mdx",tags:[],version:"current",frontMatter:{keywords:["definition","yaml","smart contract creator","one-time","contract generation","datatypes"],description:"the syntax of a schema definition file will be described here.",image:"/img/logo/WASP_logo_dark.png"}},l={},c=[{value:"name",id:"name",level:2},{value:"description",id:"description",level:2},{value:"events",id:"events",level:2},{value:"structs",id:"structs",level:2},{value:"typedefs",id:"typedefs",level:2},{value:"state",id:"state",level:2},{value:"funcs",id:"funcs",level:2},{value:"views",id:"views",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"yaml"},"YAML"),(0,r.kt)("p",null,"A schema definition file can have following level 1 attributes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name"),(0,r.kt)("li",{parentName:"ul"},"description"),(0,r.kt)("li",{parentName:"ul"},"events"),(0,r.kt)("li",{parentName:"ul"},"structs"),(0,r.kt)("li",{parentName:"ul"},"typedefs"),(0,r.kt)("li",{parentName:"ul"},"state"),(0,r.kt)("li",{parentName:"ul"},"funcs"),(0,r.kt)("li",{parentName:"ul"},"views")),(0,r.kt)("p",null,"We are going to introduce each level 1 attributes in the following sections."),(0,r.kt)("h2",{id:"name"},"name"),(0,r.kt)("p",null,"Single string. The name of the smart contract. This name will be used as the package name  of the smart contract."),(0,r.kt)("h2",{id:"description"},"description"),(0,r.kt)("p",null,"Single string. A description for what this smart contract works for. We currently not process it for the final smart contract."),(0,r.kt)("h2",{id:"events"},"events"),(0,r.kt)("p",null,"Map of strings. You can define your structured events here. Check ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/wasm_vm/events"},"events")," for more information.\nThe fields in an event must be primitive types, so array, map or typedef can't be the datatype of the fields."),(0,r.kt)("h2",{id:"structs"},"structs"),(0,r.kt)("p",null,"Map of string maps. Declare the structs that can be used in the following development. A declared struct can be called in the schema definition, too.\nThe fields in a struct can't be array, map or typedef alias. In other words, only the primitive types are accepted. "),(0,r.kt)("h2",{id:"typedefs"},"typedefs"),(0,r.kt)("p",null,"Map of strings. Declare alias of a primitive value. Now only a primitive value, a map of primitive values or an array of primitive values are accepted.\nAnd a nested typedef is not accepted now."),(0,r.kt)("h2",{id:"state"},"state"),(0,r.kt)("p",null,"Map of strings. ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," is a collection of arbitrary key/value pairs represent usecase-specific data. See ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/core_concepts/states"},"states")," for more information.\nIf you want to use nested types, you can use typedef to declare an alias of array or map, then use the alias as the value in the state.\nHowever, the key of a map can't be an alias. The key of a map must be a primitive type."),(0,r.kt)("h2",{id:"funcs"},"funcs"),(0,r.kt)("p",null,"All the values of ",(0,r.kt)("inlineCode",{parentName:"p"},"funcs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"views")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"results")," which share the same name should be in the same datatype.\nFor function names, ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," is a preserved keyword. A function  named as ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," is a special function, see ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/wasm_vm/init"},"init")," for more information."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"access"),": Who can access this function. This field must be state variable. You can visit ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/wasm_vm/access#limiting-access"},"Limiting Access")," for more information.\n",(0,r.kt)("inlineCode",{parentName:"p"},"params"),": The input parameters of the function. The values in ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," can be an array, a map or typedef alias.\n",(0,r.kt)("inlineCode",{parentName:"p"},"results"),": The return values of the function. The values in ",(0,r.kt)("inlineCode",{parentName:"p"},"results")," can be an array, a map or typedef alias."),(0,r.kt)("h2",{id:"views"},"views"),(0,r.kt)("p",null,"All the values of ",(0,r.kt)("inlineCode",{parentName:"p"},"funcs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"views")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"results")," which share the same name should be in the same datatype."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"access"),": Who can access this function. This field must be state variable. You can visit ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/wasm_vm/access#limiting-access"},"Limiting Access")," for more information.\n",(0,r.kt)("inlineCode",{parentName:"p"},"params"),": The input parameters of the function. The values in ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," can be an array, a map or typedef alias.\n",(0,r.kt)("inlineCode",{parentName:"p"},"results"),": The return values of the function. The values in ",(0,r.kt)("inlineCode",{parentName:"p"},"results")," can be an array, a map or typedef alias."))}m.isMDXComponent=!0}}]);