"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[26922],{87631:e=>{e.exports=JSON.parse('{"pluginId":"wasp","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Overview","href":"/next/smart-contracts/overview","docId":"overview"},{"type":"category","label":"Core Concepts","items":[{"type":"link","label":"Smart Contracts","href":"/next/smart-contracts/guide/core_concepts/smart-contracts","docId":"guide/core_concepts/smart-contracts"},{"type":"link","label":"ISC Architecture","href":"/next/smart-contracts/guide/core_concepts/isc-architecture","docId":"guide/core_concepts/isc-architecture"},{"type":"link","label":"Validators and Access Nodes","href":"/next/smart-contracts/guide/core_concepts/validators","docId":"guide/core_concepts/validators"},{"type":"link","label":"Consensus","href":"/next/smart-contracts/guide/core_concepts/consensus","docId":"guide/core_concepts/consensus"},{"type":"link","label":"State, Transitions and State Anchoring","href":"/next/smart-contracts/guide/core_concepts/states","docId":"guide/core_concepts/states"},{"type":"link","label":"Anatomy of a Smart Contract","href":"/next/smart-contracts/guide/core_concepts/smart-contract-anatomy","docId":"guide/core_concepts/smart-contract-anatomy"},{"type":"link","label":"Calling a Smart Contract","href":"/next/smart-contracts/guide/core_concepts/invocation","docId":"guide/core_concepts/invocation"},{"type":"link","label":"Sandbox Interface","href":"/next/smart-contracts/guide/core_concepts/sandbox","docId":"guide/core_concepts/sandbox"},{"type":"category","label":"Core Contracts","items":[{"type":"link","label":"Overview","href":"/next/smart-contracts/guide/core_concepts/core_contracts/overview","docId":"guide/core_concepts/core_contracts/overview"},{"type":"link","label":"root","href":"/next/smart-contracts/guide/core_concepts/core_contracts/root","docId":"guide/core_concepts/core_contracts/root"},{"type":"link","label":"accounts","href":"/next/smart-contracts/guide/core_concepts/core_contracts/accounts","docId":"guide/core_concepts/core_contracts/accounts"},{"type":"link","label":"blob","href":"/next/smart-contracts/guide/core_concepts/core_contracts/blob","docId":"guide/core_concepts/core_contracts/blob"},{"type":"link","label":"blocklog","href":"/next/smart-contracts/guide/core_concepts/core_contracts/blocklog","docId":"guide/core_concepts/core_contracts/blocklog"},{"type":"link","label":"governance","href":"/next/smart-contracts/guide/core_concepts/core_contracts/governance","docId":"guide/core_concepts/core_contracts/governance"},{"type":"link","label":"errors","href":"/next/smart-contracts/guide/core_concepts/core_contracts/errors","docId":"guide/core_concepts/core_contracts/errors"},{"type":"link","label":"evm","href":"/next/smart-contracts/guide/core_concepts/core_contracts/evm","docId":"guide/core_concepts/core_contracts/evm"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Accounts","items":[{"type":"link","label":"How Accounts Work","href":"/next/smart-contracts/guide/core_concepts/accounts/how-accounts-work","docId":"guide/core_concepts/accounts/how-accounts-work"},{"type":"link","label":"How To Deposit To a Chain","href":"/next/smart-contracts/guide/core_concepts/accounts/how-to-deposit-to-a-chain","docId":"guide/core_concepts/accounts/how-to-deposit-to-a-chain"},{"type":"link","label":"How To Withdraw From a Chain","href":"/next/smart-contracts/guide/core_concepts/accounts/how-to-withdraw-from-a-chain","docId":"guide/core_concepts/accounts/how-to-withdraw-from-a-chain"},{"type":"link","label":"View Account Balances","href":"/next/smart-contracts/guide/core_concepts/accounts/view-account-balances","docId":"guide/core_concepts/accounts/view-account-balances"},{"type":"link","label":"The Common Account","href":"/next/smart-contracts/guide/core_concepts/accounts/the-common-account","docId":"guide/core_concepts/accounts/the-common-account"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Testing Smart Contracts with Solo","items":[{"type":"link","label":"What is Solo?","href":"/next/smart-contracts/guide/solo/what-is-solo","docId":"guide/solo/what-is-solo"},{"type":"link","label":"First Example","href":"/next/smart-contracts/guide/solo/first-example","docId":"guide/solo/first-example"},{"type":"link","label":"The L1 Ledger","href":"/next/smart-contracts/guide/solo/the-l1-ledger","docId":"guide/solo/the-l1-ledger"},{"type":"link","label":"Deploying a Smart Contract","href":"/next/smart-contracts/guide/solo/deploying-sc","docId":"guide/solo/deploying-sc"},{"type":"link","label":"Invoking a Smart Contract","href":"/next/smart-contracts/guide/solo/invoking-sc","docId":"guide/solo/invoking-sc"},{"type":"link","label":"Calling a View","href":"/next/smart-contracts/guide/solo/view-sc","docId":"guide/solo/view-sc"},{"type":"link","label":"Error Handling","href":"/next/smart-contracts/guide/solo/error-handling","docId":"guide/solo/error-handling"},{"type":"link","label":"Accounts","href":"/next/smart-contracts/guide/solo/the-l2-ledger","docId":"guide/solo/the-l2-ledger"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"ISC Chains and Nodes","items":[{"type":"link","label":"Installing Wasp","href":"/next/smart-contracts/guide/chains_and_nodes/installing-wasp","docId":"guide/chains_and_nodes/installing-wasp"},{"type":"link","label":"Running a Node","href":"/next/smart-contracts/guide/chains_and_nodes/running-a-node","docId":"guide/chains_and_nodes/running-a-node"},{"type":"link","label":"Node Configuration","href":"/next/smart-contracts/guide/chains_and_nodes/node-config","docId":"guide/chains_and_nodes/node-config"},{"type":"link","label":"Using Docker (Standalone)","href":"/next/smart-contracts/guide/chains_and_nodes/docker_standalone","docId":"guide/chains_and_nodes/docker_standalone"},{"type":"link","label":"Configuring wasp-cli","href":"/next/smart-contracts/guide/chains_and_nodes/wasp-cli","docId":"guide/chains_and_nodes/wasp-cli"},{"type":"link","label":"Setting Up a Chain","href":"/next/smart-contracts/guide/chains_and_nodes/setting-up-a-chain","docId":"guide/chains_and_nodes/setting-up-a-chain"},{"type":"link","label":"Chain Management","href":"/next/smart-contracts/guide/chains_and_nodes/chain-management","docId":"guide/chains_and_nodes/chain-management"},{"type":"link","label":"Chain Rotation","href":"/next/smart-contracts/guide/chains_and_nodes/chain-rotation","docId":"guide/chains_and_nodes/chain-rotation"},{"type":"link","label":"Testnet","href":"/next/smart-contracts/guide/chains_and_nodes/testnet","docId":"guide/chains_and_nodes/testnet"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Wasm VM","items":[{"type":"link","label":"Wasm VM for ISC","href":"/next/smart-contracts/guide/wasm_vm/intro","docId":"guide/wasm_vm/intro"},{"type":"link","label":"Smart Contract Concepts","href":"/next/smart-contracts/guide/wasm_vm/concepts","docId":"guide/wasm_vm/concepts"},{"type":"link","label":"Call Context","href":"/next/smart-contracts/guide/wasm_vm/context","docId":"guide/wasm_vm/context"},{"type":"link","label":"Smart Contract Schema Tool","href":"/next/smart-contracts/guide/wasm_vm/schema","docId":"guide/wasm_vm/schema"},{"type":"link","label":"Using the Schema Tool","href":"/next/smart-contracts/guide/wasm_vm/usage","docId":"guide/wasm_vm/usage"},{"type":"link","label":"Data Access Proxies","href":"/next/smart-contracts/guide/wasm_vm/proxies","docId":"guide/wasm_vm/proxies"},{"type":"link","label":"WasmLib Data Types","href":"/next/smart-contracts/guide/wasm_vm/types","docId":"guide/wasm_vm/types"},{"type":"link","label":"Structured Data Types","href":"/next/smart-contracts/guide/wasm_vm/structs","docId":"guide/wasm_vm/structs"},{"type":"link","label":"Type Definitions","href":"/next/smart-contracts/guide/wasm_vm/typedefs","docId":"guide/wasm_vm/typedefs"},{"type":"link","label":"Smart Contract State","href":"/next/smart-contracts/guide/wasm_vm/state","docId":"guide/wasm_vm/state"},{"type":"link","label":"Triggering Events","href":"/next/smart-contracts/guide/wasm_vm/events","docId":"guide/wasm_vm/events"},{"type":"link","label":"Function Definitions","href":"/next/smart-contracts/guide/wasm_vm/funcs","docId":"guide/wasm_vm/funcs"},{"type":"link","label":"Limiting Access","href":"/next/smart-contracts/guide/wasm_vm/access","docId":"guide/wasm_vm/access"},{"type":"link","label":"Function Parameters","href":"/next/smart-contracts/guide/wasm_vm/params","docId":"guide/wasm_vm/params"},{"type":"link","label":"Function Results","href":"/next/smart-contracts/guide/wasm_vm/results","docId":"guide/wasm_vm/results"},{"type":"link","label":"Thunk Functions","href":"/next/smart-contracts/guide/wasm_vm/thunks","docId":"guide/wasm_vm/thunks"},{"type":"link","label":"View-Only Functions","href":"/next/smart-contracts/guide/wasm_vm/views","docId":"guide/wasm_vm/views"},{"type":"link","label":"Smart Contract Initialization","href":"/next/smart-contracts/guide/wasm_vm/init","docId":"guide/wasm_vm/init"},{"type":"link","label":"Token Transfers","href":"/next/smart-contracts/guide/wasm_vm/transfers","docId":"guide/wasm_vm/transfers"},{"type":"link","label":"Function Descriptors","href":"/next/smart-contracts/guide/wasm_vm/funcdesc","docId":"guide/wasm_vm/funcdesc"},{"type":"link","label":"Calling Functions","href":"/next/smart-contracts/guide/wasm_vm/call","docId":"guide/wasm_vm/call"},{"type":"link","label":"Posting Asynchronous Requests","href":"/next/smart-contracts/guide/wasm_vm/post","docId":"guide/wasm_vm/post"},{"type":"link","label":"Testing Smart Contracts","href":"/next/smart-contracts/guide/wasm_vm/test","docId":"guide/wasm_vm/test"},{"type":"link","label":"Example Tests","href":"/next/smart-contracts/guide/wasm_vm/examples","docId":"guide/wasm_vm/examples"},{"type":"link","label":"Colored Tokens and Time Locks","href":"/next/smart-contracts/guide/wasm_vm/timelock","docId":"guide/wasm_vm/timelock"}],"collapsed":true,"collapsible":true},{"type":"category","label":"EVM","items":[{"type":"link","label":"Introduction","href":"/next/smart-contracts/guide/evm/introduction","docId":"guide/evm/introduction"},{"type":"link","label":"Compatibility","href":"/next/smart-contracts/guide/evm/compatibility","docId":"guide/evm/compatibility"},{"type":"link","label":"How to Use","href":"/next/smart-contracts/guide/evm/using","docId":"guide/evm/using"},{"type":"link","label":"The Magic Contract","href":"/next/smart-contracts/guide/evm/magic","docId":"guide/evm/magic"},{"type":"link","label":"Tooling","href":"/next/smart-contracts/guide/evm/tooling","docId":"guide/evm/tooling"},{"type":"category","label":"Examples","items":[{"type":"link","label":"Example Contract","href":"/next/smart-contracts/guide/evm/examples/introduction","docId":"guide/evm/examples/introduction"},{"type":"link","label":"ERC20","href":"/next/smart-contracts/guide/evm/examples/ERC20","docId":"guide/evm/examples/ERC20"},{"type":"link","label":"ERC721","href":"/next/smart-contracts/guide/evm/examples/ERC721","docId":"guide/evm/examples/ERC721"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Example projects","items":[{"type":"link","label":"Fair Roulette","href":"/next/smart-contracts/guide/example_projects/fair_roulette","docId":"guide/example_projects/fair_roulette"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Development tools","items":[{"type":"link","label":"Preconfigured Development Docker setup","href":"/next/smart-contracts/guide/development_tools/docker_preconfigured","docId":"guide/development_tools/docker_preconfigured"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Contribute","href":"/next/smart-contracts/contribute","docId":"contribute"},{"type":"link","label":"Metrics","href":"/next/smart-contracts/metrics","docId":"metrics"}]},"docs":{"configuration":{"id":"configuration","title":"Core Configuration","description":"This section describes the configuration parameters and their types for WASP."},"contribute":{"id":"contribute","title":"Contributing","description":"How to contribute to IOTA Smart Contracts. How to create better pull requests by running tests and the linter locally.","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/chain-management":{"id":"guide/chains_and_nodes/chain-management","title":"Chain Management","description":"How to manage a chain using the Grafana dashboard, a client to receive published events, logging, and validators.","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/chain-rotation":{"id":"guide/chains_and_nodes/chain-rotation","title":"Chain Rotation","description":"Get public key of wallet address","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/docker_standalone":{"id":"guide/chains_and_nodes/docker_standalone","title":"Docker (Standalone)","description":"How to run a Wasp node in using Docker. Build the image, configure it, run it.","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/installing-wasp":{"id":"guide/chains_and_nodes/installing-wasp","title":"Install Wasp","description":"How to install a Wasp node on Linux, macOS and Windows.","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/node-config":{"id":"guide/chains_and_nodes/node-config","title":"Node Configuration","description":"Learn how to configure a Wasp node.","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/publisher":{"id":"guide/chains_and_nodes/publisher","title":"Wasp Publisher","description":"Publishing important events via a Nanomsg message stream. Subscribing to a stream with a client. Message format description."},"guide/chains_and_nodes/running-a-node":{"id":"guide/chains_and_nodes/running-a-node","title":"Running a Node","description":"How to run a node. Requirements, configuration parameters, dashboard configuration, and tests.","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/setting-up-a-chain":{"id":"guide/chains_and_nodes/setting-up-a-chain","title":"Setting Up a Chain","description":"Setting up a chain requirements, configuration parameters, validators and tests.","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/testnet":{"id":"guide/chains_and_nodes/testnet","title":"Testnet","description":"A public testnet for developers to try out smart contracts","sidebar":"tutorialSidebar"},"guide/chains_and_nodes/wasp-cli":{"id":"guide/chains_and_nodes/wasp-cli","title":"Configuring wasp-cli","description":"How to configure the wasp-cli. Requirements and configuration parameters.","sidebar":"tutorialSidebar"},"guide/core_concepts/accounts/how-accounts-work":{"id":"guide/core_concepts/accounts/how-accounts-work","title":"How Accounts Work","description":"IOTA Smart Contracts chains keeps a ledger of on-chain account balances. On-chain accounts are identified by an AgentID.","sidebar":"tutorialSidebar"},"guide/core_concepts/accounts/how-to-deposit-to-a-chain":{"id":"guide/core_concepts/accounts/how-to-deposit-to-a-chain","title":"How to Deposit to a Chain","description":"The `deposit` entry point credits the transferred tokens into your on-chain account.","sidebar":"tutorialSidebar"},"guide/core_concepts/accounts/how-to-withdraw-from-a-chain":{"id":"guide/core_concepts/accounts/how-to-withdraw-from-a-chain","title":"How to Withdraw From a Chain","description":"The `withdraw` endpoint sends L2 funds owned by the caller to their L1 address.","sidebar":"tutorialSidebar"},"guide/core_concepts/accounts/the-common-account":{"id":"guide/core_concepts/accounts/the-common-account","title":"The Common Account","description":"The common account is controlled by the chain owner, and is used to store funds collected by fees, invalid contracts or sent to the L1 chain address.","sidebar":"tutorialSidebar"},"guide/core_concepts/accounts/view-account-balances":{"id":"guide/core_concepts/accounts/view-account-balances","title":"View Account Balances","description":"The Accounts contract provides the balance, totalAssets and accounts views.","sidebar":"tutorialSidebar"},"guide/core_concepts/consensus":{"id":"guide/core_concepts/consensus","title":"Consensus","description":"IOTA Smart Contracts consensus is how Layer 2 validators agree to change the chain state in the same way.","sidebar":"tutorialSidebar"},"guide/core_concepts/core_contracts/accounts":{"id":"guide/core_concepts/core_contracts/accounts","title":"The `accounts` Contract","description":"The `accounts` contract keeps the ledger of on-chain accounts.","sidebar":"tutorialSidebar"},"guide/core_concepts/core_contracts/blob":{"id":"guide/core_concepts/core_contracts/blob","title":"The `blob` Contract","description":"The `blobs` contract maintains a registry of _blobs_ (a collection of arbitrary binary data) referenced from smart contracts via their hashes.","sidebar":"tutorialSidebar"},"guide/core_concepts/core_contracts/blocklog":{"id":"guide/core_concepts/core_contracts/blocklog","title":"The `blocklog` Contract","description":"The `blocklog` contract keeps track of the blocks of requests processed by the chain.","sidebar":"tutorialSidebar"},"guide/core_concepts/core_contracts/errors":{"id":"guide/core_concepts/core_contracts/errors","title":"The `errors` Contract","description":"The errors contract keeps a map of error codes to error message templates. These error codes are used in request receipts.","sidebar":"tutorialSidebar"},"guide/core_concepts/core_contracts/evm":{"id":"guide/core_concepts/core_contracts/evm","title":"The `evm` Contract","description":"The evm core contract provides the necessary infrastructure to accept Ethereum transactions and execute EVM code.","sidebar":"tutorialSidebar"},"guide/core_concepts/core_contracts/governance":{"id":"guide/core_concepts/core_contracts/governance","title":"The `governance` Contract","description":"The `governance` contract defines the set of identities that constitute the state controller, access nodes, who is the chain owner, and the fees for request execution.","sidebar":"tutorialSidebar"},"guide/core_concepts/core_contracts/overview":{"id":"guide/core_concepts/core_contracts/overview","title":"Core Contracts","description":"There currently are 6 core smart contracts that are always deployed on each  chain, root, _default, accounts, blob, blocklog, and governance.","sidebar":"tutorialSidebar"},"guide/core_concepts/core_contracts/root":{"id":"guide/core_concepts/core_contracts/root","title":"The `root` Contract","description":"The root contract is the first smart contract deployed on the chain. It functions as a smart contract factory for the chain.","sidebar":"tutorialSidebar"},"guide/core_concepts/invocation":{"id":"guide/core_concepts/invocation","title":"Calling a Smart Contract","description":"Smart contracts can be invoked through their entry points, from outside via a request, or from inside via a call.","sidebar":"tutorialSidebar"},"guide/core_concepts/isc-architecture":{"id":"guide/core_concepts/isc-architecture","title":"ISC Architecture","description":"An overview of the IOTA Smart Contracts architecture.","sidebar":"tutorialSidebar"},"guide/core_concepts/sandbox":{"id":"guide/core_concepts/sandbox","title":"Sandbox Interface","description":"Smart Contracts can only interact with the world by using the Sandbox interface which provides limited and deterministic access to the state through a key/value storage abstraction.","sidebar":"tutorialSidebar"},"guide/core_concepts/smart-contract-anatomy":{"id":"guide/core_concepts/smart-contract-anatomy","title":"Anatomy of a Smart Contract","description":"Each smart contract instance has a program with a collection of entry points and a state.","sidebar":"tutorialSidebar"},"guide/core_concepts/smart-contracts":{"id":"guide/core_concepts/smart-contracts","title":"Smart Contracts","description":"Smart contracts are applications you can trust that run on a distributed network with multiple validators all executing and validating the same code.","sidebar":"tutorialSidebar"},"guide/core_concepts/states":{"id":"guide/core_concepts/states","title":"State, Transitions, and State Anchoring","description":"The state of the chain consists of balances of native IOTA digital assets and a collection of key/value pairs which represents use case-specific data stored in the chain by its smart contracts outside the UTXO ledger.","sidebar":"tutorialSidebar"},"guide/core_concepts/validators":{"id":"guide/core_concepts/validators","title":"Validators","description":"Each chain is run by a network of validator nodes which run a consensus on the chain state update.","sidebar":"tutorialSidebar"},"guide/development_tools/docker_preconfigured":{"id":"guide/development_tools/docker_preconfigured","title":"Preconfigured Development Docker setup","description":"How to run the preconfigured Docker setup.","sidebar":"tutorialSidebar"},"guide/evm/compatibility":{"id":"guide/evm/compatibility","title":"EVM Compatibility in IOTA Smart Contracts","description":"Compatibility between the ISC EVM layer and existing Ethereum smart contracts and tooling.","sidebar":"tutorialSidebar"},"guide/evm/examples/ERC20":{"id":"guide/evm/examples/ERC20","title":"ERC20 Example","description":"Solidity smart contract ERC20.","sidebar":"tutorialSidebar"},"guide/evm/examples/ERC721":{"id":"guide/evm/examples/ERC721","title":"ERC721 Example","description":"Create and deploy a Solidity smart contract to mint NFTs using the ERC721 standard.","sidebar":"tutorialSidebar"},"guide/evm/examples/introduction":{"id":"guide/evm/examples/introduction","title":"Solidity Smart Contract Example","description":"Solidity smart contract example.","sidebar":"tutorialSidebar"},"guide/evm/introduction":{"id":"guide/evm/introduction","title":"EVM/Solidity Based Smart Contracts","description":"The current release of IOTA Smart Contracts also has experimental support for EVM/Solidity, providing limited compatibility with existing smart contracts and tooling from other EVM based chains like Ethereum.","sidebar":"tutorialSidebar"},"guide/evm/magic":{"id":"guide/evm/magic","title":"The ISC Magic Contract","description":"The ISC Magic Contract allows EVM contracts to access ISC functionality.","sidebar":"tutorialSidebar"},"guide/evm/tooling":{"id":"guide/evm/tooling","title":"EVM Tooling","description":"Existing EVM tooling is compatible and can be used directly with an IOTA Smart Contracts chain running EVM. You can configure hardhat, metamask, remix, Ether.js and Web3.js among others.","sidebar":"tutorialSidebar"},"guide/evm/using":{"id":"guide/evm/using","title":"How to use EVM in IOTA Smart Contracts","description":"How to configure and use EVM support in IOTA Smart Contracts.","sidebar":"tutorialSidebar"},"guide/example_projects/fair_roulette":{"id":"guide/example_projects/fair_roulette","title":"Fair Roulette","description":"An example game project with frontend and contract, demonstrating the development, setup, and interaction with a smart contract.","sidebar":"tutorialSidebar"},"guide/solo/deploying-sc":{"id":"guide/solo/deploying-sc","title":"Deploying Wasm Smart Contracts","description":"Deploying Wasm smart contracts with Solo.","sidebar":"tutorialSidebar"},"guide/solo/error-handling":{"id":"guide/solo/error-handling","title":"Error Handling","description":"What happens when a smart contract invocation fails?","sidebar":"tutorialSidebar"},"guide/solo/first-example":{"id":"guide/solo/first-example","title":"First Example","description":"Example of a _Solo_ test. It deploys a new chain and invokes some view calls.","sidebar":"tutorialSidebar"},"guide/solo/invoking-sc":{"id":"guide/solo/invoking-sc","title":"Invoking Smart Contracts","description":"Invoking smart contracts with on-ledger and off-ledger requests with Solo.","sidebar":"tutorialSidebar"},"guide/solo/the-l1-ledger":{"id":"guide/solo/the-l1-ledger","title":"The L1 Ledger","description":"How to interact with the L1 ledger in Solo.","sidebar":"tutorialSidebar"},"guide/solo/the-l2-ledger":{"id":"guide/solo/the-l2-ledger","title":"The L2 Ledger","description":"Smart contracts can exchange assets between themselves on the same chain and between different chains, as well as with addresses on the L1 ledger.","sidebar":"tutorialSidebar"},"guide/solo/view-sc":{"id":"guide/solo/view-sc","title":"Calling a View","description":"Calling smart contract view functions with Solo.","sidebar":"tutorialSidebar"},"guide/solo/what-is-solo":{"id":"guide/solo/what-is-solo","title":"Testing Smart Contracts with Solo","description":"Solo is a testing framework that allows developers to validate real smart contracts and entire inter-chain protocols.","sidebar":"tutorialSidebar"},"guide/wasm_vm/access":{"id":"guide/wasm_vm/access","title":"Limiting Access","description":"The optional access subsection indicates the agent who is allowed to access the function. When this definition is omitted, anyone is allowed to call the function.","sidebar":"tutorialSidebar"},"guide/wasm_vm/call":{"id":"guide/wasm_vm/call","title":"Calling Functions","description":"Synchronous calls can only be made between contracts that are running on the same contract chain. When calling a smart contract function you can only access the memory assigned to that specific smart contract, the only way to share data between smart contracts that call each other is through function parameters and return values.","sidebar":"tutorialSidebar"},"guide/wasm_vm/concepts":{"id":"guide/wasm_vm/concepts","title":"Smart Contract Concepts","description":"First let\'s talk about some important concepts about smart contracts in general and then about ISC smart contract concepts in particular.","sidebar":"tutorialSidebar"},"guide/wasm_vm/context":{"id":"guide/wasm_vm/context","title":"Call Context","description":"The call context is a predefined parameter to each smart contract function, which allows you to access the functionality that the call environment provides.","sidebar":"tutorialSidebar"},"guide/wasm_vm/events":{"id":"guide/wasm_vm/events","title":"Triggering Events","description":"The smart contracts can trigger events that the user can subscribe to and that convey changes to its state.","sidebar":"tutorialSidebar"},"guide/wasm_vm/examples":{"id":"guide/wasm_vm/examples","title":"Example Tests","description":"Use the SoloContext to create full-blown tests for the dividend example smart contract.","sidebar":"tutorialSidebar"},"guide/wasm_vm/funcdesc":{"id":"guide/wasm_vm/funcdesc","title":"Function Descriptors","description":"The schema tool provides us with an easy way to get access to smart contract functions through function descriptors, which allow you to initiate the function by calling it synchronously, or posting a request to run it asynchronously.","sidebar":"tutorialSidebar"},"guide/wasm_vm/funcs":{"id":"guide/wasm_vm/funcs","title":"Function Definitions","description":"The code generated for Funcs will be able to inspect and modify the smart contract state, whereas the code generated for Views will only be able to inspect the state.","sidebar":"tutorialSidebar"},"guide/wasm_vm/init":{"id":"guide/wasm_vm/init","title":"Smart Contract Initialization","description":"The init function will automatically be called immediately after the first time the contract has been deployed to the VM. This is a one-time initialization call, meant to be performed by the contract deployment mechanism.","sidebar":"tutorialSidebar"},"guide/wasm_vm/intro":{"id":"guide/wasm_vm/intro","title":"Introduction to the Wasm VM for ISC","description":"IOTA Smart Contracts (ISC) provides a very flexible way of programming smart contracts by providing an API to a sandboxed environment that allows you to interact deterministically and without any security risks with ISC-provided functionality.","sidebar":"tutorialSidebar"},"guide/wasm_vm/params":{"id":"guide/wasm_vm/params","title":"Function Parameters","description":"The optional params subsection contains field definitions for each of the parameters that a function takes.","sidebar":"tutorialSidebar"},"guide/wasm_vm/post":{"id":"guide/wasm_vm/post","title":"Posting Asynchronous Requests","description":"Asynchronous function calls between smart contracts are posted as requests on the Tangle. They allow you to invoke any smart contract function that is not a View on any smart contract chain.","sidebar":"tutorialSidebar"},"guide/wasm_vm/proxies":{"id":"guide/wasm_vm/proxies","title":"Data Access Proxies","description":"As there is no way for the Wasm code to access any memory outside its own memory space, the WasmLib interface provides a number of proxies to make accessing data within the ISC sandbox as seamless as possible.","sidebar":"tutorialSidebar"},"guide/wasm_vm/results":{"id":"guide/wasm_vm/results","title":"Function Results","description":"The optional `results` subsection contains field definitions for each of the results a function produces. The layout of the field definitions is identical to that of the state field definitions","sidebar":"tutorialSidebar"},"guide/wasm_vm/schema":{"id":"guide/wasm_vm/schema","title":"Smart Contract Schema Tool","description":"To facilitate code generation, we decided to use a _schema definition file_ for smart contracts. All aspects of a smart contract that should be known by someone who wants to use the contract are clearly defined in a schema definition file.","sidebar":"tutorialSidebar"},"guide/wasm_vm/spec":{"id":"guide/wasm_vm/spec","title":"Spec","description":"The spec of schema tool and how to develop schema tool."},"guide/wasm_vm/state":{"id":"guide/wasm_vm/state","title":"Smart Contract State","description":"The smart contract state storage on the host consists of a single key/value map, as long as you access the data in the same way that you used to store it, you will always get valid data back.","sidebar":"tutorialSidebar"},"guide/wasm_vm/structs":{"id":"guide/wasm_vm/structs","title":"Structured Data Types","description":"You can use structs directly as a type in state storage definitions and the schema tool will automatically generate the proxy code to access it properly.","sidebar":"tutorialSidebar"},"guide/wasm_vm/test":{"id":"guide/wasm_vm/test","title":"Testing Smart Contracts","description":"Testing of smart contracts happens in the Solo testing environment. This enables synchronous, deterministic testing of smart contract functionality without the overhead of having to start nodes, set up a committee, and send transactions over the Tangle.","sidebar":"tutorialSidebar"},"guide/wasm_vm/thunks":{"id":"guide/wasm_vm/thunks","title":"Thunk Functions","description":"Thunk functions encapsulate access and parameter checking and set up the type-safe function-specific contexts. Thunks are used to insert operations at the beginning or end of the wrapped function to adapt it to changing requirements","sidebar":"tutorialSidebar"},"guide/wasm_vm/timelock":{"id":"guide/wasm_vm/timelock","title":"Minting NFTs and Time Locks","description":"You can post a time-locked request by using the Delay() method. You can mint NFTs by using the MintNFT() method.","sidebar":"tutorialSidebar"},"guide/wasm_vm/transfers":{"id":"guide/wasm_vm/transfers","title":"Token Transfers","description":"There are two methods in the call context that deal with token balances. The balances() method can be used to determine the current asset balances. The allowance() method can be used to determine the caller assets that the function is allowed to use.","sidebar":"tutorialSidebar"},"guide/wasm_vm/typedefs":{"id":"guide/wasm_vm/typedefs","title":"Type Definitions","description":"You can add a typedefs section to the schema definition file, where you can define a single type name for a container type. This way you can easily create containers that contain container types.","sidebar":"tutorialSidebar"},"guide/wasm_vm/types":{"id":"guide/wasm_vm/types","title":"WasmLib Data Types","description":"The WasmLib provides direct support for the basic value data types that are found in all programming languages, and WasmLib versions of ISC-specific value data types.","sidebar":"tutorialSidebar"},"guide/wasm_vm/usage":{"id":"guide/wasm_vm/usage","title":"Using the Schema Tool","description":"The `schema` tool will assist in creating a smart contract as unobtrusively as possible.","sidebar":"tutorialSidebar"},"guide/wasm_vm/views":{"id":"guide/wasm_vm/views","title":"View-Only Functions","description":"Views are smart contract functions that only allow you to retrieve state information about the smart contract. They have a special, limited call context that does not allow them to change the smart contract state.","sidebar":"tutorialSidebar"},"guide/wasm_vm/yaml":{"id":"guide/wasm_vm/yaml","title":"YAML","description":"the syntax of a schema definition file will be described here."},"metrics":{"id":"metrics","title":"Exposed Metrics","description":"IOTA Smart Contract Protocol is IOTA\'s solution for running smart contracts on top of the IOTA tangle.","sidebar":"tutorialSidebar"},"overview":{"id":"overview","title":"IOTA Smart Contracts","description":"IOTA Smart Contracts allow you to run smart contracts on top of the IOTA Tangle.","sidebar":"tutorialSidebar"}}}')}}]);