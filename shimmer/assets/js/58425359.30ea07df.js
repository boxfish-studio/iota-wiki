"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[22089],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(a),h=r,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return a?n.createElement(m,c(c({ref:t},u),{},{components:a})):n.createElement(m,c({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6117:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={},c="Account Approaches",i={unversionedId:"explanations/account_approaches",id:"explanations/account_approaches",title:"Account Approaches",description:"In wallet.rs, you can use an account model",source:"@site/shimmer/external/wallet.rs/documentation/docs/explanations/account_approaches.md",sourceDirName:"explanations",slug:"/explanations/account_approaches",permalink:"/shimmer/wallet.rs/explanations/account_approaches",draft:!1,editUrl:"https://github.com/iotaledger/wallet.rs/edit/develop/documentation/shimmer/external/wallet.rs/documentation/docs/explanations/account_approaches.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Library Overview",permalink:"/shimmer/wallet.rs/explanations/library_overview"},next:{title:"Run Code Examples",permalink:"/shimmer/wallet.rs/how_tos/run_how_tos"}},s={},l=[{value:"Multi-Account Approach",id:"multi-account-approach",level:2},{value:"Single Account Approach",id:"single-account-approach",level:2}],u={toc:l};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"account-approaches"},"Account Approaches"),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"/shimmer/wallet.rs/welcome"},"wallet.rs"),", you can use an account model\nto ",(0,r.kt)("a",{parentName:"p",href:"#multi-account-approach"},"create an account for each user"),"\nor ",(0,r.kt)("a",{parentName:"p",href:"#single-account-approach"},"use one account and generate multiple addresses"),", which you can then link to the users in\nyour database. The wallet library is as flexible as possible and can back up any of your use cases."),(0,r.kt)("p",null,"The library supports derivation for multiple accounts from a single seed. An account is simply a deterministic\nidentifier from which multiple addresses can be further derived."),(0,r.kt)("p",null,"The library also allows consumers to assign a meaningful alias to each account. Since addresses are reusable, they can\nbe mapped to your users in a clear and concise way."),(0,r.kt)("h2",{id:"multi-account-approach"},"Multi-Account Approach"),(0,r.kt)("p",null,"You should use the multi-account approach if you want to create an account for each individual user. You can link the\naccounts to the internal user IDs as an account alias, which are distinctly separated."),(0,r.kt)("h2",{id:"single-account-approach"},"Single Account Approach"),(0,r.kt)("p",null,"You should use the single account approach if you want to create a single account and then create an address for each\nuser. You will need to link the associated addresses to the internal user IDs and store who owns which address in a\ndatabase. Most exchanges are familiar with the single account approach and find it easier to use, implement, and backup."))}p.isMDXComponent=!0}}]);