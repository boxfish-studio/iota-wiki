"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[42086],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var i=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=s(n),k=l,h=d["".concat(p,".").concat(k)]||d[k]||u[k]||a;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>s});var i=n(87462),l=(n(67294),n(3905));const a={description:"Official IOTA Client Library Java API reference.",image:"/img/logo/iota_mark_light.png",keywords:["api","java"]},o="API Reference",r={unversionedId:"libraries/java/api_reference",id:"libraries/java/api_reference",title:"API Reference",description:"Official IOTA Client Library Java API reference.",source:"@site/shimmer/external/iota.rs/documentation/docs/libraries/java/api_reference.md",sourceDirName:"libraries/java",slug:"/libraries/java/api_reference",permalink:"/shimmer/iota.rs/libraries/java/api_reference",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/develop/documentation/shimmer/external/iota.rs/documentation/docs/libraries/java/api_reference.md",tags:[],version:"current",frontMatter:{description:"Official IOTA Client Library Java API reference.",image:"/img/logo/iota_mark_light.png",keywords:["api","java"]},sidebar:"docs",previous:{title:"More examples",permalink:"/shimmer/iota.rs/how_tos/more_examples"},next:{title:"@iota/client",permalink:"/shimmer/iota.rs/libraries/nodejs/references/api_ref"}},p={},s=[{value:"<code>public boolean getHealth(String nodeUrl) throws ClientException</code>",id:"public-boolean-gethealthstring-nodeurl-throws-clientexception",level:2},{value:"<code>public NodeInfoResponse getNodeInfo() throws ClientException</code>",id:"public-nodeinforesponse-getnodeinfo-throws-clientexception",level:2},{value:"<code>public BlockId[] getTips() throws ClientException</code>",id:"public-blockid-gettips-throws-clientexception",level:2},{value:"<code>public BlockId postBlock(Block block) throws ClientException</code>",id:"public-blockid-postblockblock-block-throws-clientexception",level:2},{value:"<code>public BlockId postBlockRaw(byte[] blockBytes) throws ClientException</code>",id:"public-blockid-postblockrawbyte-blockbytes-throws-clientexception",level:2},{value:"<code>public Block getBlock(BlockId blockId) throws ClientException</code>",id:"public-block-getblockblockid-blockid-throws-clientexception",level:2},{value:"<code>public byte[] getBlockRaw(BlockId blockId) throws ClientException</code>",id:"public-byte-getblockrawblockid-blockid-throws-clientexception",level:2},{value:"<code>public BlockMetadata getBlockMetadata(BlockId blockId) throws ClientException</code>",id:"public-blockmetadata-getblockmetadatablockid-blockid-throws-clientexception",level:2},{value:"<code>public Map.Entry&lt;Output, OutputMetadata&gt; getOutput(OutputId outputId) throws ClientException</code>",id:"public-mapentryoutput-outputmetadata-getoutputoutputid-outputid-throws-clientexception",level:2},{value:"<code>public OutputMetadata getOutputMetadata(OutputId outputId) throws ClientException</code>",id:"public-outputmetadata-getoutputmetadataoutputid-outputid-throws-clientexception",level:2},{value:"<code>public Receipt[] getReceiptsMigratedAt(int milestoneIndex) throws ClientException</code>",id:"public-receipt-getreceiptsmigratedatint-milestoneindex-throws-clientexception",level:2},{value:"<code>public Receipt[] getReceipts() throws ClientException</code>",id:"public-receipt-getreceipts-throws-clientexception",level:2},{value:"<code>public TreasuryResponse getTreasury() throws ClientException</code>",id:"public-treasuryresponse-gettreasury-throws-clientexception",level:2},{value:"<code>public Block getIncludedBlock(TransactionId transactionId) throws ClientException</code>",id:"public-block-getincludedblocktransactionid-transactionid-throws-clientexception",level:2},{value:"<code>public MilestonePayload getMilestoneById(MilestoneId milestoneId) throws ClientException</code>",id:"public-milestonepayload-getmilestonebyidmilestoneid-milestoneid-throws-clientexception",level:2},{value:"<code>public MilestonePayload getMilestoneByIndex(int milestoneIndex) throws ClientException</code>",id:"public-milestonepayload-getmilestonebyindexint-milestoneindex-throws-clientexception",level:2},{value:"<code>public byte[] getMilestoneByIdRaw(MilestoneId milestoneId) throws ClientException</code>",id:"public-byte-getmilestonebyidrawmilestoneid-milestoneid-throws-clientexception",level:2},{value:"<code>public byte[] getMilestoneByIndexRaw(int milestoneIndex) throws ClientException</code>",id:"public-byte-getmilestonebyindexrawint-milestoneindex-throws-clientexception",level:2},{value:"<code>public UtxoChangesResponse getUtxoChangesById(MilestoneId milestoneId) throws ClientException</code>",id:"public-utxochangesresponse-getutxochangesbyidmilestoneid-milestoneid-throws-clientexception",level:2},{value:"<code>public UtxoChangesResponse getUtxoChangesByIndex(int milestoneIndex) throws ClientException</code>",id:"public-utxochangesresponse-getutxochangesbyindexint-milestoneindex-throws-clientexception",level:2},{value:"<code>public Peer[] getPeers() throws ClientException</code>",id:"public-peer-getpeers-throws-clientexception",level:2},{value:"<code>public OutputId[] getBasicOutputIds(NodeIndexerApi.QueryParams params) throws ClientException</code>",id:"public-outputid-getbasicoutputidsnodeindexerapiqueryparams-params-throws-clientexception",level:2},{value:"<code>public OutputId[] getAliasOutputIds(NodeIndexerApi.QueryParams params) throws ClientException</code>",id:"public-outputid-getaliasoutputidsnodeindexerapiqueryparams-params-throws-clientexception",level:2},{value:"<code>public OutputId[] getNftOutputIds(NodeIndexerApi.QueryParams params) throws ClientException</code>",id:"public-outputid-getnftoutputidsnodeindexerapiqueryparams-params-throws-clientexception",level:2},{value:"<code>public OutputId[] getFoundryOutputIds(NodeIndexerApi.QueryParams params) throws ClientException</code>",id:"public-outputid-getfoundryoutputidsnodeindexerapiqueryparams-params-throws-clientexception",level:2},{value:"<code>public OutputId getAliasOutputIdByAliasId(AliasId aliasId) throws ClientException</code>",id:"public-outputid-getaliasoutputidbyaliasidaliasid-aliasid-throws-clientexception",level:2},{value:"<code>public OutputId getNftOutputIdByNftId(NftId nftId) throws ClientException</code>",id:"public-outputid-getnftoutputidbynftidnftid-nftid-throws-clientexception",level:2},{value:"<code>public OutputId getFoundryOutputIdByFoundryId(FoundryId foundryId) throws ClientException</code>",id:"public-outputid-getfoundryoutputidbyfoundryidfoundryid-foundryid-throws-clientexception",level:2},{value:"<code>public List&lt;Map.Entry&lt;Output, OutputMetadata&gt;&gt; getOutputs(OutputId[] outputIds) throws ClientException</code>",id:"public-listmapentryoutput-outputmetadata-getoutputsoutputid-outputids-throws-clientexception",level:2},{value:"<code>public List&lt;Map.Entry&lt;Output, OutputMetadata&gt;&gt; tryGetOutputs(OutputId[] outputIds) throws ClientException</code>",id:"public-listmapentryoutput-outputmetadata-trygetoutputsoutputid-outputids-throws-clientexception",level:2},{value:"<code>public Block[] findBlocks(BlockId[] blockIds) throws ClientException</code>",id:"public-block-findblocksblockid-blockids-throws-clientexception",level:2},{value:"<code>public Map.Entry&lt;BlockId, Block&gt; retry(BlockId blockId) throws ClientException</code>",id:"public-mapentryblockid-block-retryblockid-blockid-throws-clientexception",level:2},{value:"<code>public LinkedHashMap&lt;BlockId, Block&gt; retryUntilIncluded(BlockId blockId, int interval, int maxAttempts) throws ClientException</code>",id:"public-linkedhashmapblockid-block-retryuntilincludedblockid-blockid-int-interval-int-maxattempts-throws-clientexception",level:2},{value:"<code>public String consolidateFunds(SecretManager secretManager, GenerateAddressesOptions generateAddressesOptions) throws ClientException</code>",id:"public-string-consolidatefundssecretmanager-secretmanager-generateaddressesoptions-generateaddressesoptions-throws-clientexception",level:2},{value:"<code>public UtxoInput[] findInputs(String[] addresses, int amount) throws ClientException</code>",id:"public-utxoinput-findinputsstring-addresses-int-amount-throws-clientexception",level:2},{value:"<code>public List&lt;Map.Entry&lt;Output, OutputMetadata&gt;&gt; findOutputs(OutputId[] outputIds, String[] addresses) throws ClientException</code>",id:"public-listmapentryoutput-outputmetadata-findoutputsoutputid-outputids-string-addresses-throws-clientexception",level:2},{value:"<code>public Map.Entry&lt;BlockId, Block&gt; reattach(BlockId blockId) throws ClientException</code>",id:"public-mapentryblockid-block-reattachblockid-blockid-throws-clientexception",level:2},{value:"<code>public Map.Entry&lt;BlockId, Block&gt; reattachUnchecked(BlockId blockId) throws ClientException</code>",id:"public-mapentryblockid-block-reattachuncheckedblockid-blockid-throws-clientexception",level:2},{value:"<code>public Map.Entry&lt;BlockId, Block&gt; promote(BlockId blockId) throws ClientException</code>",id:"public-mapentryblockid-block-promoteblockid-blockid-throws-clientexception",level:2},{value:"<code>public Map.Entry&lt;BlockId, Block&gt; promoteUnchecked(BlockId blockId) throws ClientException</code>",id:"public-mapentryblockid-block-promoteuncheckedblockid-blockid-throws-clientexception",level:2},{value:"<code>public String bech32ToHex(String bech32) throws ClientException</code>",id:"public-string-bech32tohexstring-bech32-throws-clientexception",level:2},{value:"<code>public String hexToBech32(String hex, String bech32) throws ClientException</code>",id:"public-string-hextobech32string-hex-string-bech32-throws-clientexception",level:2},{value:"<code>public String hexPublicKeyToBech32Address(String hex, String bech32) throws ClientException</code>",id:"public-string-hexpublickeytobech32addressstring-hex-string-bech32-throws-clientexception",level:2},{value:"<code>public String parseBech32Address(String address) throws ClientException</code>",id:"public-string-parsebech32addressstring-address-throws-clientexception",level:2},{value:"<code>public boolean isAddressValid(String address) throws ClientException</code>",id:"public-boolean-isaddressvalidstring-address-throws-clientexception",level:2},{value:"<code>public String generateMnemonic() throws ClientException</code>",id:"public-string-generatemnemonic-throws-clientexception",level:2},{value:"<code>public String mnemonicToHexSeed(String mnemonic) throws ClientException</code>",id:"public-string-mnemonictohexseedstring-mnemonic-throws-clientexception",level:2},{value:"<code>public BlockId getBlockId(Block block) throws ClientException</code>",id:"public-blockid-getblockidblock-block-throws-clientexception",level:2},{value:"<code>public TransactionId getTransactionId(TransactionPayload payload) throws ClientException</code>",id:"public-transactionid-gettransactionidtransactionpayload-payload-throws-clientexception",level:2},{value:"<code>public AliasId computeAliasId(OutputId aliasOutputId) throws ClientException</code>",id:"public-aliasid-computealiasidoutputid-aliasoutputid-throws-clientexception",level:2},{value:"<code>public NftId computeNftId(OutputId nftOutputId) throws ClientException</code>",id:"public-nftid-computenftidoutputid-nftoutputid-throws-clientexception",level:2},{value:"<code>public FoundryId computeFoundryId(String aliasAddress, int serialNumber, int tokenScheme) throws ClientException</code>",id:"public-foundryid-computefoundryidstring-aliasaddress-int-serialnumber-int-tokenscheme-throws-clientexception",level:2},{value:"<code>public Output buildAliasOutput( AliasOutputBuilderParams params ) throws ClientException</code>",id:"public-output-buildaliasoutput-aliasoutputbuilderparams-params--throws-clientexception",level:2},{value:"<code>public Output buildBasicOutput( BasicOutputBuilderParams params ) throws ClientException</code>",id:"public-output-buildbasicoutput-basicoutputbuilderparams-params--throws-clientexception",level:2},{value:"<code>public Output buildFoundryOutput( FoundryOutputBuilderParams params ) throws ClientException</code>",id:"public-output-buildfoundryoutput-foundryoutputbuilderparams-params--throws-clientexception",level:2},{value:"<code>public Output buildNftOutput( NftOutputBuilderParams params ) throws ClientException</code>",id:"public-output-buildnftoutput-nftoutputbuilderparams-params--throws-clientexception",level:2},{value:"<code>public String[] generateAddresses(SecretManager secretManager, GenerateAddressesOptions generateAddressesOptions) throws ClientException</code>",id:"public-string-generateaddressessecretmanager-secretmanager-generateaddressesoptions-generateaddressesoptions-throws-clientexception",level:2},{value:"<code>public Map.Entry&lt;BlockId, Block&gt; buildAndPostBlock(SecretManager secretManager, BuildBlockOptions options) throws ClientException</code>",id:"public-mapentryblockid-block-buildandpostblocksecretmanager-secretmanager-buildblockoptions-options-throws-clientexception",level:2},{value:"<code>public Node getNode() throws ClientException</code>",id:"public-node-getnode-throws-clientexception",level:2},{value:"<code>public JsonObject getNetworkInfo() throws ClientException</code>",id:"public-jsonobject-getnetworkinfo-throws-clientexception",level:2},{value:"<code>public int getNetworkId() throws ClientException</code>",id:"public-int-getnetworkid-throws-clientexception",level:2},{value:"<code>public String getBech32Hrp() throws ClientException</code>",id:"public-string-getbech32hrp-throws-clientexception",level:2},{value:"<code>public float getMinPowScore() throws ClientException</code>",id:"public-float-getminpowscore-throws-clientexception",level:2},{value:"<code>public int getTipsInterval() throws ClientException</code>",id:"public-int-gettipsinterval-throws-clientexception",level:2},{value:"<code>public boolean getLocalPow() throws ClientException</code>",id:"public-boolean-getlocalpow-throws-clientexception",level:2},{value:"<code>public boolean getFallbackToLocalPow() throws ClientException</code>",id:"public-boolean-getfallbacktolocalpow-throws-clientexception",level:2},{value:"<code>public Node[] getUnhealthyNodes() throws ClientException</code>",id:"public-node-getunhealthynodes-throws-clientexception",level:2},{value:"<code>public LedgerNanoStatus getLedgerNanoStatus(boolean isSimulator) throws ClientException</code>",id:"public-ledgernanostatus-getledgernanostatusboolean-issimulator-throws-clientexception",level:2},{value:"<code>public PreparedTransactionData prepareTransaction(SecretManager secretManager, BuildBlockOptions buildBlockOptions) throws ClientException</code>",id:"public-preparedtransactiondata-preparetransactionsecretmanager-secretmanager-buildblockoptions-buildblockoptions-throws-clientexception",level:2},{value:"<code>public TransactionPayload signTransaction(SecretManager secretManager, PreparedTransactionData preparedTransactionData) throws ClientException</code>",id:"public-transactionpayload-signtransactionsecretmanager-secretmanager-preparedtransactiondata-preparedtransactiondata-throws-clientexception",level:2},{value:"<code>public void storeMnemonic(SecretManager secretManager, String mnemonic) throws ClientException</code>",id:"public-void-storemnemonicsecretmanager-secretmanager-string-mnemonic-throws-clientexception",level:2},{value:"<code>public Map.Entry&lt;BlockId, Block&gt; postBlockPayload(BlockPayload payload) throws ClientException</code>",id:"public-mapentryblockid-block-postblockpayloadblockpayload-payload-throws-clientexception",level:2},{value:"<code>public String getTokenSupply() throws ClientException</code>",id:"public-string-gettokensupply-throws-clientexception",level:2},{value:"<code>public String getProtocolParameters() throws ClientException</code>",id:"public-string-getprotocolparameters-throws-clientexception",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-reference"},"API Reference"),(0,l.kt)("h1",{id:"clientjava"},"Client.java"),(0,l.kt)("h2",{id:"public-boolean-gethealthstring-nodeurl-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public boolean getHealth(String nodeUrl) throws ClientException")),(0,l.kt)("p",null,"Get the health of a given node."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"nodeUrl")," \u2014 The URL of the node to check."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," True if the node is healthy, false otherwise.")),(0,l.kt)("h2",{id:"public-nodeinforesponse-getnodeinfo-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public NodeInfoResponse getNodeInfo() throws ClientException")),(0,l.kt)("p",null,"Get the node information of the given node."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The node information of the given node.")),(0,l.kt)("h2",{id:"public-blockid-gettips-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public BlockId[] getTips() throws ClientException")),(0,l.kt)("p",null,"Get the tips of the Tangle."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The tips of the Tangle.")),(0,l.kt)("h2",{id:"public-blockid-postblockblock-block-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public BlockId postBlock(Block block) throws ClientException")),(0,l.kt)("p",null,"Post a block to the node."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"block")," \u2014 The block to be posted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The block id of the block that was posted.")),(0,l.kt)("h2",{id:"public-blockid-postblockrawbyte-blockbytes-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public BlockId postBlockRaw(byte[] blockBytes) throws ClientException")),(0,l.kt)("p",null,"Post a block to the node."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockBytes")," \u2014 The raw bytes of the block to be posted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The block id of the block that was just posted.")),(0,l.kt)("h2",{id:"public-block-getblockblockid-blockid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Block getBlock(BlockId blockId) throws ClientException")),(0,l.kt)("p",null,"Get a block by its block id"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The block ID of the block you want to retrieve."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A block object.")),(0,l.kt)("h2",{id:"public-byte-getblockrawblockid-blockid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public byte[] getBlockRaw(BlockId blockId) throws ClientException")),(0,l.kt)("p",null,"Get the raw bytes of a block"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The block ID of the block you want to get."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The raw bytes of the block.")),(0,l.kt)("h2",{id:"public-blockmetadata-getblockmetadatablockid-blockid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public BlockMetadata getBlockMetadata(BlockId blockId) throws ClientException")),(0,l.kt)("p",null,"Get the metadata of a block"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The id of the block to get metadata for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," BlockMetadata")),(0,l.kt)("h2",{id:"public-mapentryoutput-outputmetadata-getoutputoutputid-outputid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Map.Entry<Output, OutputMetadata> getOutput(OutputId outputId) throws ClientException")),(0,l.kt)("p",null,"Get the output with the given id"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"outputId")," \u2014 The id of the output you want to get."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A map entry with the output and its metadata.")),(0,l.kt)("h2",{id:"public-outputmetadata-getoutputmetadataoutputid-outputid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public OutputMetadata getOutputMetadata(OutputId outputId) throws ClientException")),(0,l.kt)("p",null,"Get the metadata of an output"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"outputId")," \u2014 The output ID of the output you want to get metadata for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," OutputMetadata")),(0,l.kt)("h2",{id:"public-receipt-getreceiptsmigratedatint-milestoneindex-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Receipt[] getReceiptsMigratedAt(int milestoneIndex) throws ClientException")),(0,l.kt)("p",null,"Returns the list of all the receipts that were migrated at the given milestone index"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"milestoneIndex")," \u2014 The index of the milestone to get the receipts for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," Receipts")),(0,l.kt)("h2",{id:"public-receipt-getreceipts-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Receipt[] getReceipts() throws ClientException")),(0,l.kt)("p",null,"Get all the receipts."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An array of Receipt objects.")),(0,l.kt)("h2",{id:"public-treasuryresponse-gettreasury-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public TreasuryResponse getTreasury() throws ClientException")),(0,l.kt)("p",null,"Get the treasury balance"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," TreasuryResponse")),(0,l.kt)("h2",{id:"public-block-getincludedblocktransactionid-transactionid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Block getIncludedBlock(TransactionId transactionId) throws ClientException")),(0,l.kt)("p",null,"Returns the block that contains the transaction that was included in the ledger."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"transactionId")," \u2014 The transaction that was included in the ledger."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A block that contains the transaction.")),(0,l.kt)("h2",{id:"public-milestonepayload-getmilestonebyidmilestoneid-milestoneid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public MilestonePayload getMilestoneById(MilestoneId milestoneId) throws ClientException")),(0,l.kt)("p",null,"Get the milestone payload for the given milestone id"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"milestoneId")," \u2014 The milestone ID of the milestone you want to get."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A MilestonePayload object.")),(0,l.kt)("h2",{id:"public-milestonepayload-getmilestonebyindexint-milestoneindex-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public MilestonePayload getMilestoneByIndex(int milestoneIndex) throws ClientException")),(0,l.kt)("p",null,"Get the milestone at the specified index"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"milestoneIndex")," \u2014 The index of the milestone you want to retrieve."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A MilestonePayload object.")),(0,l.kt)("h2",{id:"public-byte-getmilestonebyidrawmilestoneid-milestoneid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public byte[] getMilestoneByIdRaw(MilestoneId milestoneId) throws ClientException")),(0,l.kt)("p",null,"Returns the raw bytes of a milestone by its id"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"milestoneId")," \u2014 The milestone ID to get the raw data for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A byte array of the milestone data.")),(0,l.kt)("h2",{id:"public-byte-getmilestonebyindexrawint-milestoneindex-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public byte[] getMilestoneByIndexRaw(int milestoneIndex) throws ClientException")),(0,l.kt)("p",null,"Returns the raw bytes of the milestone at the given index"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"milestoneIndex")," \u2014 The index of the milestone you want to retrieve."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The raw bytes of the milestone at the given index.")),(0,l.kt)("h2",{id:"public-utxochangesresponse-getutxochangesbyidmilestoneid-milestoneid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public UtxoChangesResponse getUtxoChangesById(MilestoneId milestoneId) throws ClientException")),(0,l.kt)("p",null,"Returns the UTXO changes for the given milestone id"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"milestoneId")," \u2014 The milestone id of the milestone to get the UTXO changes for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The UTXO changes for the given milestone index.")),(0,l.kt)("h2",{id:"public-utxochangesresponse-getutxochangesbyindexint-milestoneindex-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public UtxoChangesResponse getUtxoChangesByIndex(int milestoneIndex) throws ClientException")),(0,l.kt)("p",null,"Returns the UTXO changes for the given milestone index"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"milestoneIndex")," \u2014 The index of the milestone to get the UTXO changes for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The UTXO changes for the given milestone index.")),(0,l.kt)("h2",{id:"public-peer-getpeers-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Peer[] getPeers() throws ClientException")),(0,l.kt)("p",null,"Get the list of peers connected to the node"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An array of Peer objects.")),(0,l.kt)("h2",{id:"public-outputid-getbasicoutputidsnodeindexerapiqueryparams-params-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public OutputId[] getBasicOutputIds(NodeIndexerApi.QueryParams params) throws ClientException")),(0,l.kt)("p",null,"Returns the basic output ids that match the given query parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," \u2014 a QueryParams object that contains the following fields:"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An array of OutputIds.")),(0,l.kt)("h2",{id:"public-outputid-getaliasoutputidsnodeindexerapiqueryparams-params-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public OutputId[] getAliasOutputIds(NodeIndexerApi.QueryParams params) throws ClientException")),(0,l.kt)("p",null,"Returns the alias output ids that match the given query parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," \u2014 a QueryParams object that contains the following fields:"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An array of OutputIds.")),(0,l.kt)("h2",{id:"public-outputid-getnftoutputidsnodeindexerapiqueryparams-params-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public OutputId[] getNftOutputIds(NodeIndexerApi.QueryParams params) throws ClientException")),(0,l.kt)("p",null,"Returns the NFT output ids that match the given query parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," \u2014 a QueryParams object that contains the following fields:"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An array of OutputIds.")),(0,l.kt)("h2",{id:"public-outputid-getfoundryoutputidsnodeindexerapiqueryparams-params-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public OutputId[] getFoundryOutputIds(NodeIndexerApi.QueryParams params) throws ClientException")),(0,l.kt)("p",null,"Returns the Foundry output ids that match the given query parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," \u2014 a QueryParams object that contains the following fields:"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An array of OutputIds.")),(0,l.kt)("h2",{id:"public-outputid-getaliasoutputidbyaliasidaliasid-aliasid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public OutputId getAliasOutputIdByAliasId(AliasId aliasId) throws ClientException")),(0,l.kt)("p",null,"The aliasId of the alias you want to get the outputId for.eturns the output id of an alias by its alias id"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"aliasId")," \u2014 The aliasId of the alias you want to get the outputId for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," OutputId")),(0,l.kt)("h2",{id:"public-outputid-getnftoutputidbynftidnftid-nftid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public OutputId getNftOutputIdByNftId(NftId nftId) throws ClientException")),(0,l.kt)("p",null,"The aliasId of the alias you want to get the outputId for."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"nftId")," \u2014 The NFT Id of the NFT you want to get the outputId for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," OutputId")),(0,l.kt)("h2",{id:"public-outputid-getfoundryoutputidbyfoundryidfoundryid-foundryid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public OutputId getFoundryOutputIdByFoundryId(FoundryId foundryId) throws ClientException")),(0,l.kt)("p",null,"The aliasId of the alias you want to get the outputId for."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"foundryId")," \u2014 The id of the foundry you want to get the output id for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The output id of the foundry.")),(0,l.kt)("h2",{id:"public-listmapentryoutput-outputmetadata-getoutputsoutputid-outputids-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public List<Map.Entry<Output, OutputMetadata>> getOutputs(OutputId[] outputIds) throws ClientException")),(0,l.kt)("p",null,"Get the outputs for the given output IDs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"outputIds")," \u2014 An array of OutputId objects."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A list of entries, where each entry is a pair of an Output and its OutputMetadata.")),(0,l.kt)("h2",{id:"public-listmapentryoutput-outputmetadata-trygetoutputsoutputid-outputids-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public List<Map.Entry<Output, OutputMetadata>> tryGetOutputs(OutputId[] outputIds) throws ClientException")),(0,l.kt)("p",null,"Try get the outputs for the given output IDs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"outputIds")," \u2014 An array of OutputId objects."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A list of entries, where each entry is a pair of an output and its metadata.")),(0,l.kt)("h2",{id:"public-block-findblocksblockid-blockids-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Block[] findBlocks(BlockId[] blockIds) throws ClientException")),(0,l.kt)("p",null,"Finds blocks by their ids"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockIds")," \u2014 An array of BlockId objects."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An array of blocks.")),(0,l.kt)("h2",{id:"public-mapentryblockid-block-retryblockid-blockid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Map.Entry<BlockId, Block> retry(BlockId blockId) throws ClientException")),(0,l.kt)("p",null,"Retry a block that has failed to process"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The id of the block to retry."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A map entry with the block id and the block.")),(0,l.kt)("h2",{id:"public-linkedhashmapblockid-block-retryuntilincludedblockid-blockid-int-interval-int-maxattempts-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public LinkedHashMap<BlockId, Block> retryUntilIncluded(BlockId blockId, int interval, int maxAttempts) throws ClientException")),(0,l.kt)("p",null,"Retry until the block is included in the blockchain"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The block ID to retry."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"interval")," \u2014 The interval in seconds between each attempt to retrieve the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxAttempts")," \u2014 The maximum number of attempts to make before giving up."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A LinkedHashMap of BlockId and Block.")),(0,l.kt)("h2",{id:"public-string-consolidatefundssecretmanager-secretmanager-generateaddressesoptions-generateaddressesoptions-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String consolidateFunds(SecretManager secretManager, GenerateAddressesOptions generateAddressesOptions) throws ClientException")),(0,l.kt)("p",null,"This function will consolidate all funds of the wallet"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"secretManager")," \u2014 The secret manager that holds the secret for the account you want to consolidate funds for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"generateAddressesOptions")," \u2014 This is an object that contains the following parameters:"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A String containing the transaction hash.")),(0,l.kt)("h2",{id:"public-utxoinput-findinputsstring-addresses-int-amount-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public UtxoInput[] findInputs(String[] addresses, int amount) throws ClientException")),(0,l.kt)("p",null,"Finds the inputs that are needed to create a transaction with the given amount"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"addresses")," \u2014 An array of addresses to search for inputs."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"amount")," \u2014 The amount you want to spend."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An array of UtxoInput objects.")),(0,l.kt)("h2",{id:"public-listmapentryoutput-outputmetadata-findoutputsoutputid-outputids-string-addresses-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public List<Map.Entry<Output, OutputMetadata>> findOutputs(OutputId[] outputIds, String[] addresses) throws ClientException")),(0,l.kt)("p",null,"Finds outputs by their ids and addresses"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"outputIds")," \u2014 An array of OutputId objects."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"addresses")," \u2014 The addresses to search for outputs."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A list of outputs and their metadata.")),(0,l.kt)("h2",{id:"public-mapentryblockid-block-reattachblockid-blockid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Map.Entry<BlockId, Block> reattach(BlockId blockId) throws ClientException")),(0,l.kt)("p",null,"Reattaches a block to the blockchain"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The id of the block to reattach."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A map entry with the block id and the block.")),(0,l.kt)("h2",{id:"public-mapentryblockid-block-reattachuncheckedblockid-blockid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Map.Entry<BlockId, Block> reattachUnchecked(BlockId blockId) throws ClientException")),(0,l.kt)("p",null,"ReattachUnchecked() reattaches a block to the tangle, without checking if it's necessary to."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The block id of the block to reattach."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A map entry with the block id and the block.")),(0,l.kt)("h2",{id:"public-mapentryblockid-block-promoteblockid-blockid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Map.Entry<BlockId, Block> promote(BlockId blockId) throws ClientException")),(0,l.kt)("p",null,"Promote a block"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The id of the block to promote."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A map entry with the block id and the block.")),(0,l.kt)("h2",{id:"public-mapentryblockid-block-promoteuncheckedblockid-blockid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Map.Entry<BlockId, Block> promoteUnchecked(BlockId blockId) throws ClientException")),(0,l.kt)("p",null,"Promote a block, without checking if it's necessary to."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"blockId")," \u2014 The id of the block to promote."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A map entry with the block id and the block.")),(0,l.kt)("h2",{id:"public-string-bech32tohexstring-bech32-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String bech32ToHex(String bech32) throws ClientException")),(0,l.kt)("p",null,"Converts a bech32 address to a hex address"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"bech32")," \u2014 bech32 address"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A hex string.")),(0,l.kt)("h2",{id:"public-string-hextobech32string-hex-string-bech32-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String hexToBech32(String hex, String bech32) throws ClientException")),(0,l.kt)("p",null,"Converts a hex string to a bech32 string"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hex")," \u2014 The hexadecimal string to be converted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bech32")," \u2014 The bech32 to use."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The bech32 address.")),(0,l.kt)("h2",{id:"public-string-hexpublickeytobech32addressstring-hex-string-bech32-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String hexPublicKeyToBech32Address(String hex, String bech32) throws ClientException")),(0,l.kt)("p",null,"Converts a hex public key to a bech32 address"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hex")," \u2014 The public key in hexadecimal format."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bech32")," \u2014 The bech32 prefix"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The bech32 address.")),(0,l.kt)("h2",{id:"public-string-parsebech32addressstring-address-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String parseBech32Address(String address) throws ClientException")),(0,l.kt)("p",null,"This function is used to parse the Bech32 address"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"address")," \u2014 The address to be parsed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The address in hex format.")),(0,l.kt)("h2",{id:"public-boolean-isaddressvalidstring-address-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public boolean isAddressValid(String address) throws ClientException")),(0,l.kt)("p",null,"Checks if the given address is valid"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"address")," \u2014 The address to validate."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A boolean value.")),(0,l.kt)("h2",{id:"public-string-generatemnemonic-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String generateMnemonic() throws ClientException")),(0,l.kt)("p",null,"Generate a mnemonic"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The mnemonic string.")),(0,l.kt)("h2",{id:"public-string-mnemonictohexseedstring-mnemonic-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String mnemonicToHexSeed(String mnemonic) throws ClientException")),(0,l.kt)("p",null,"Converts a mnemonic to a hex seed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"mnemonic")," \u2014 The mnemonic to convert to a hex seed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A hex seed.")),(0,l.kt)("h2",{id:"public-blockid-getblockidblock-block-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public BlockId getBlockId(Block block) throws ClientException")),(0,l.kt)("p",null,"This function computes the block id of a block"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"block")," \u2014 The block to compute the block id from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The block id of the block.")),(0,l.kt)("h2",{id:"public-transactionid-gettransactionidtransactionpayload-payload-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public TransactionId getTransactionId(TransactionPayload payload) throws ClientException")),(0,l.kt)("p",null,"This function returns a transaction ID for a given transaction payload"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"payload")," \u2014 The payload of the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A TransactionId object.")),(0,l.kt)("h2",{id:"public-aliasid-computealiasidoutputid-aliasoutputid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public AliasId computeAliasId(OutputId aliasOutputId) throws ClientException")),(0,l.kt)("p",null,"Computes the alias id for the given alias output id"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"aliasOutputId")," \u2014 The output ID of the alias."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The alias id of the output id.")),(0,l.kt)("h2",{id:"public-nftid-computenftidoutputid-nftoutputid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public NftId computeNftId(OutputId nftOutputId) throws ClientException")),(0,l.kt)("p",null,"Computes the NFT ID from the NFT output ID"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"nftOutputId")," \u2014 The output id of the NFT."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The NFT ID of the NFT output.")),(0,l.kt)("h2",{id:"public-foundryid-computefoundryidstring-aliasaddress-int-serialnumber-int-tokenscheme-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public FoundryId computeFoundryId(String aliasAddress, int serialNumber, int tokenScheme) throws ClientException")),(0,l.kt)("p",null,"Computes the Foundry ID for a given alias address, serial number, and token scheme"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"aliasAddress")," \u2014 The alias address of the device."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"serialNumber")," \u2014 The serial number of the token."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tokenScheme")," \u2014 The token scheme to use.  This is a value from the TokenScheme enum."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A FoundryId object.")),(0,l.kt)("h2",{id:"public-output-buildaliasoutput-aliasoutputbuilderparams-params--throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Output buildAliasOutput( AliasOutputBuilderParams params ) throws ClientException")),(0,l.kt)("p",null,"Builds an alias output"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," \u2014 AliasOutputBuilderParams"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An output object.")),(0,l.kt)("h2",{id:"public-output-buildbasicoutput-basicoutputbuilderparams-params--throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Output buildBasicOutput( BasicOutputBuilderParams params ) throws ClientException")),(0,l.kt)("p",null,"Builds a basic output"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," \u2014 The parameters for the request."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An output object.")),(0,l.kt)("h2",{id:"public-output-buildfoundryoutput-foundryoutputbuilderparams-params--throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Output buildFoundryOutput( FoundryOutputBuilderParams params ) throws ClientException")),(0,l.kt)("p",null,"Builds a Foundry output object from the given parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," \u2014 FoundryOutputBuilderParams"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," An output object.")),(0,l.kt)("h2",{id:"public-output-buildnftoutput-nftoutputbuilderparams-params--throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Output buildNftOutput( NftOutputBuilderParams params ) throws ClientException")),(0,l.kt)("p",null,"Builds an NFT output"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," \u2014 NftOutputBuilderParams"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," Output")),(0,l.kt)("h2",{id:"public-string-generateaddressessecretmanager-secretmanager-generateaddressesoptions-generateaddressesoptions-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String[] generateAddresses(SecretManager secretManager, GenerateAddressesOptions generateAddressesOptions) throws ClientException")),(0,l.kt)("p",null,"Generate addresses for a given secret manager"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"secretManager")," \u2014 The secret manager to use for generating the addresses."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"generateAddressesOptions")," \u2014 The options for generating addresses."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A list of addresses")),(0,l.kt)("h2",{id:"public-mapentryblockid-block-buildandpostblocksecretmanager-secretmanager-buildblockoptions-options-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Map.Entry<BlockId, Block> buildAndPostBlock(SecretManager secretManager, BuildBlockOptions options) throws ClientException")),(0,l.kt)("p",null,"Builds a block and posts it to the network"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"secretManager")," \u2014 The secret manager to use for signing the block."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options")," \u2014 The options for building the block."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A map entry with the block id and the block itself.")),(0,l.kt)("h2",{id:"public-node-getnode-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Node getNode() throws ClientException")),(0,l.kt)("p",null,"Get a node"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The node object.")),(0,l.kt)("h2",{id:"public-jsonobject-getnetworkinfo-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public JsonObject getNetworkInfo() throws ClientException")),(0,l.kt)("p",null,"Get network information"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A JsonObject")),(0,l.kt)("h2",{id:"public-int-getnetworkid-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public int getNetworkId() throws ClientException")),(0,l.kt)("p",null,"Get the network ID of the current network"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The network ID of the current network.")),(0,l.kt)("h2",{id:"public-string-getbech32hrp-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String getBech32Hrp() throws ClientException")),(0,l.kt)("p",null,"Get the Bech32 HRP for the current network"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The Bech32 Human Readable Part (HRP) for addresses.")),(0,l.kt)("h2",{id:"public-float-getminpowscore-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public float getMinPowScore() throws ClientException")),(0,l.kt)("p",null,"Get the minimum PoW score required for a transaction to be accepted"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The minimum PoW score.")),(0,l.kt)("h2",{id:"public-int-gettipsinterval-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public int getTipsInterval() throws ClientException")),(0,l.kt)("p",null,"Get the tips interval in seconds"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The interval in seconds.")),(0,l.kt)("h2",{id:"public-boolean-getlocalpow-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public boolean getLocalPow() throws ClientException")),(0,l.kt)("p",null,"Returns true if the local PoW is enabled, otherwise false."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," true if the local PoW is enabled, otherwise false.")),(0,l.kt)("h2",{id:"public-boolean-getfallbacktolocalpow-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public boolean getFallbackToLocalPow() throws ClientException")),(0,l.kt)("p",null,"Returns true if the client is configured to fallback to local proof of work if the remote proof of work service is unavailable"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," true if the client is configured to fallback to local proof of work, else returns false.")),(0,l.kt)("h2",{id:"public-node-getunhealthynodes-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Node[] getUnhealthyNodes() throws ClientException")),(0,l.kt)("p",null,"Get the list of nodes that are not healthy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The array of nodes that are not healthy.")),(0,l.kt)("h2",{id:"public-ledgernanostatus-getledgernanostatusboolean-issimulator-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public LedgerNanoStatus getLedgerNanoStatus(boolean isSimulator) throws ClientException")),(0,l.kt)("p",null,"Get the status of the Ledger Nano device"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"isSimulator")," \u2014 true if you want to use the simulator, false if you want to use the real device."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," LedgerNanoStatus")),(0,l.kt)("h2",{id:"public-preparedtransactiondata-preparetransactionsecretmanager-secretmanager-buildblockoptions-buildblockoptions-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public PreparedTransactionData prepareTransaction(SecretManager secretManager, BuildBlockOptions buildBlockOptions) throws ClientException")),(0,l.kt)("p",null,"Prepares a transaction for signing"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"secretManager")," \u2014 The secret manager that holds the secret for the account."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"buildBlockOptions")," \u2014 This is the object that contains the transaction details."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The prepared transaction.")),(0,l.kt)("h2",{id:"public-transactionpayload-signtransactionsecretmanager-secretmanager-preparedtransactiondata-preparedtransactiondata-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public TransactionPayload signTransaction(SecretManager secretManager, PreparedTransactionData preparedTransactionData) throws ClientException")),(0,l.kt)("p",null,"Signs the given prepared transaction using the secret manager"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"secretManager")," \u2014 The secret manager that holds the secret key for the account that will sign the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"preparedTransactionData")," \u2014 The transaction data that was prepared by the prepareTransaction method."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The signed transaction.")),(0,l.kt)("h2",{id:"public-void-storemnemonicsecretmanager-secretmanager-string-mnemonic-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public void storeMnemonic(SecretManager secretManager, String mnemonic) throws ClientException")),(0,l.kt)("p",null,"Stores the mnemonic in the secret manager"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"secretManager")," \u2014 The secret manager to use."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mnemonic")," \u2014 The mnemonic to store.")))),(0,l.kt)("h2",{id:"public-mapentryblockid-block-postblockpayloadblockpayload-payload-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public Map.Entry<BlockId, Block> postBlockPayload(BlockPayload payload) throws ClientException")),(0,l.kt)("p",null,"Automatically builds a block containing the given block payload and broadcasts it to the network."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Parameters:")," ",(0,l.kt)("inlineCode",{parentName:"li"},"payload")," \u2014 The payload to be posted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," A map entry of the posted block id and the block.")),(0,l.kt)("h2",{id:"public-string-gettokensupply-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String getTokenSupply() throws ClientException")),(0,l.kt)("p",null,"Returns the token supply"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The token supply.")),(0,l.kt)("h2",{id:"public-string-getprotocolparameters-throws-clientexception"},(0,l.kt)("inlineCode",{parentName:"h2"},"public String getProtocolParameters() throws ClientException")),(0,l.kt)("p",null,"Returns the protocol parameters."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Returns:")," The protocol parameters.")))}u.isMDXComponent=!0}}]);