"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[88204],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>d});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},i=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,c=e.originalType,s=e.parentName,i=r(e,["components","mdxType","originalType","parentName"]),m=u(a),d=l,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||c;return a?n.createElement(b,o(o({ref:t},i),{},{components:a})):n.createElement(b,o({ref:t},i))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var c=a.length,o=new Array(c);o[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var u=2;u<c;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},33541:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>p});var n=a(87462),l=(a(67294),a(3905)),c=a(34259),o=a(18679);const r={description:"The Accounts contract provides the balance, totalAssets and accounts views.",image:"/img/logo/WASP_logo_dark.png",keywords:["smart contracts","view","account","balances","Rust","Solo","how to"]},s="View Account Balances",u={unversionedId:"guide/core_concepts/accounts/view-account-balances",id:"guide/core_concepts/accounts/view-account-balances",title:"View Account Balances",description:"The Accounts contract provides the balance, totalAssets and accounts views.",source:"@site/shimmer/external/wasp/documentation/docs/guide/core_concepts/accounts/view-account-balances.mdx",sourceDirName:"guide/core_concepts/accounts",slug:"/guide/core_concepts/accounts/view-account-balances",permalink:"/shimmer/smart-contracts/guide/core_concepts/accounts/view-account-balances",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/master/documentation/shimmer/external/wasp/documentation/docs/guide/core_concepts/accounts/view-account-balances.mdx",tags:[],version:"current",frontMatter:{description:"The Accounts contract provides the balance, totalAssets and accounts views.",image:"/img/logo/WASP_logo_dark.png",keywords:["smart contracts","view","account","balances","Rust","Solo","how to"]},sidebar:"tutorialSidebar",previous:{title:"How to Withdraw From a Chain",permalink:"/shimmer/smart-contracts/guide/core_concepts/accounts/how-to-withdraw-from-a-chain"},next:{title:"The Common Account",permalink:"/shimmer/smart-contracts/guide/core_concepts/accounts/the-common-account"}},i={},p=[{value:"<code>balance</code>",id:"balance",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"<code>totalAssets</code>",id:"totalassets",level:2},{value:"Returns",id:"returns-1",level:3},{value:"<code>accounts</code>",id:"accounts",level:2},{value:"Returns",id:"returns-2",level:3}],m={toc:p};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"view-account-balances"},"View Account Balances"),(0,l.kt)("p",null,"The Accounts contract provides the following views:"),(0,l.kt)("h2",{id:"balance"},(0,l.kt)("inlineCode",{parentName:"h2"},"balance")),(0,l.kt)("p",null,"Get the account balance of a specific account."),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ParamAgentID"),": account's AgentID.")),(0,l.kt)("h3",{id:"returns"},"Returns"),(0,l.kt)("p",null,"A map of ",(0,l.kt)("inlineCode",{parentName:"p"},"token ID -> amount")," (the base token is identified by an empty token ID)."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)(c.Z,{defaultValue:"solo",values:[{label:"Solo",value:"solo"},{label:"Solo (Schema)",value:"soloctx"},{label:"Rust (Schema)",value:"rust"},{label:"Go (Schema)",value:"go"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"solo",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"balances := chain.L2Assets(agentID)\n"))),(0,l.kt)(o.Z,{value:"soloctx",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"b := coreaccounts.ScFuncs.Balance(ctx)\nb.Params.AgentID().SetValue(agentID)\nb.Func.Call()\nrequire.NoError(t, ctx.Err)\nbalances := b.Results.Balances()\n"))),(0,l.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"let b = coreaccounts::ScFuncs::balance(ctx);\nb.params.agent_id().set_value(&agentID);\nb.func.call();\nlet balances = b.results.balances();\n"))),(0,l.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"b := coreaccounts.ScFuncs.Balance(ctx)\nb.Params.AgentID().SetValue(agentID)\nb.Func.Call()\nbalances := b.Results.Balances()\n")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"totalassets"},(0,l.kt)("inlineCode",{parentName:"h2"},"totalAssets")),(0,l.kt)("p",null,"Get the total funds controlled by the chain."),(0,l.kt)("h3",{id:"returns-1"},"Returns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A map of ","[token_color]"," -> ","[amount]"," .")),(0,l.kt)(c.Z,{defaultValue:"solo",values:[{label:"Solo",value:"solo"},{label:"Solo (Schema)",value:"soloctx"},{label:"Rust (Schema)",value:"rust"},{label:"Go (Schema)",value:"go"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"solo",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"balances := chain.L2TotalAssets()\n"))),(0,l.kt)(o.Z,{value:"soloctx",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"b := coreaccounts.ScFuncs.TotalAssets(ctx)\nb.Func.Call()\nrequire.NoError(t, ctx.Err)\nbalances := b.Results.Balances()\n"))),(0,l.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"let b = coreaccounts::ScFuncs::total_assets(ctx);\nb.func.call();\nlet balances = b.results.balances();\n"))),(0,l.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"b := coreaccounts.ScFuncs.TotalAssets(ctx)\nb.Func.Call()\nbalances := b.Results.Balances()\n")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"accounts"},(0,l.kt)("inlineCode",{parentName:"h2"},"accounts")),(0,l.kt)("p",null,"Get a list of all accounts that exist on the chain."),(0,l.kt)("h3",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,"A list of accounts (Agent IDs)."),(0,l.kt)(c.Z,{defaultValue:"solo",values:[{label:"Solo",value:"solo"},{label:"Solo (Schema)",value:"soloctx"},{label:"Rust (Schema)",value:"rust"},{label:"Go (Schema)",value:"go"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"solo",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"accounts := chain.L2Accounts()\n"))),(0,l.kt)(o.Z,{value:"soloctx",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"a := coreaccounts.ScFuncs.Accounts(ctx)\na.Func.Call()\nrequire.NoError(t, ctx.Err)\naccounts := a.Results.Agents()\n"))),(0,l.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"let a = coreaccounts::ScFuncs::accounts(ctx);\na.func.call();\nlet accounts = a.results.agents();\n"))),(0,l.kt)(o.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"a := coreaccounts.ScFuncs.Accounts(ctx)\na.Func.Call()\naccounts := a.Results.Agents()\n")))))}d.isMDXComponent=!0},18679:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),l=a(86010);const c="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(c,o),hidden:a},t)}},34259:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(87462),l=a(67294),c=a(86010),o=a(51048),r=a(33609),s=a(1943),u=a(72957);const i="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:a,block:o,defaultValue:m,values:d,groupId:b,className:v}=e,g=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),k=(0,r.l)(h,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:w}=(0,s.U)(),[T,x]=(0,l.useState)(f),N=[],{blockElementScrollPositionUntilNextRender:S}=(0,u.o5)();if(null!=b){const e=y[b];null!=e&&e!==T&&h.some((t=>t.value===e))&&x(e)}const A=e=>{const t=e.currentTarget,a=N.indexOf(t),n=h[a].value;n!==T&&(S(t),x(n),null!=b&&w(b,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;a=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;a=N[t]??N[N.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,c.Z)("tabs-container",i)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":o},v)},h.map((e=>{let{value:t,label:a,attributes:o}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>N.push(e),onKeyDown:E,onFocus:A,onClick:A},o,{className:(0,c.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,l.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,o.Z)();return l.createElement(m,(0,n.Z)({key:String(t)},e))}}}]);