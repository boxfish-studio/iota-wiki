"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[22112],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=a.createContext({}),i=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=i(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=i(t),p=s,k=m["".concat(c,".").concat(p)]||m[p]||d[p]||r;return t?a.createElement(k,l(l({ref:n},u),{},{components:t})):a.createElement(k,l({ref:n},u))}));function p(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,l[1]=o;for(var i=2;i<r;i++)l[i]=t[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},93468:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>i});var a=t(87462),s=(t(67294),t(3905));const r={},l="Step by step examples",o={unversionedId:"step_by_step",id:"step_by_step",title:"Step by step examples",description:"In these step by step examples, we present how to create a wallet and do some of the most common use cases.",source:"@site/shimmer/external/cli-wallet/documentation/docs/04_step_by_step.md",sourceDirName:".",slug:"/step_by_step",permalink:"/shimmer/cli-wallet/step_by_step",draft:!1,editUrl:"https://github.com/iotaledger/cli-wallet/edit/develop/documentation/shimmer/external/cli-wallet/documentation/docs/04_step_by_step.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Account Interface",permalink:"/shimmer/cli-wallet/account"}},c={},i=[{value:"Setup",id:"setup",level:2},{value:"Tokens",id:"tokens",level:2},{value:"Send a regular amount",id:"send-a-regular-amount",level:3},{value:"Send a micro amount",id:"send-a-micro-amount",level:3},{value:"Native tokens",id:"native-tokens",level:2},{value:"Mint",id:"mint",level:3},{value:"Send",id:"send",level:3},{value:"NFTs",id:"nfts",level:2},{value:"Mint",id:"mint-1",level:3},{value:"Send",id:"send-1",level:3},{value:"Transactions",id:"transactions",level:2}],u={toc:i};function d(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"step-by-step-examples"},"Step by step examples"),(0,s.kt)("p",null,"In these step by step examples, we present how to create a wallet and do some of the most common use cases."),(0,s.kt)("p",null,"It is advised to do them all at least once in the given order to understand the workflow."),(0,s.kt)("h2",{id:"setup"},"Setup"),(0,s.kt)("p",null,"Initialise the wallet with a given node and a randomly generated mnemonic."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"$ ./wallet init --node [NODE API URL]\n> ...\n> INFO  Mnemonic stored successfully\n")),(0,s.kt)("p",null,"Create a main account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet new main\n> ...\n> INFO  Created account "main"\n> Account "main": exit\n')),(0,s.kt)("p",null,"Create a savings account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet new savings\n> ...\n> INFO  Created account "savings"\n> Account "savings": exit\n')),(0,s.kt)("h2",{id:"tokens"},"Tokens"),(0,s.kt)("p",null,"Get some funds from the faucet to the main account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet main\n> Account "main": faucet [FAUCET ENQUEUE API URL]\n> ...\n> Account "main": sync\n> ...\n> INFO  Synced: AccountBalance ...\n> Account "main": exit\n')),(0,s.kt)("h3",{id:"send-a-regular-amount"},"Send a regular amount"),(0,s.kt)("p",null,"Get an address from the savings account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet savings\n> Account "savings": addresses\n> INFO  Address 0: [ADDRESS]\n> Account "savings": exit\n')),(0,s.kt)("p",null,"Send a regular amount from the main account to the savings address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet main\n> Account "main": send [ADDRESS] 1000000\n> ...\n> INFO  Transaction sent:\n> transaction id: 0x...\n> Some(BlockId(0x...))\n> Account "main": exit\n')),(0,s.kt)("h3",{id:"send-a-micro-amount"},"Send a micro amount"),(0,s.kt)("p",null,"Generate a new address from the savings account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet savings\n> Account "savings": new-address\n> ...\n> INFO  Address 1: [ADDRESS]\n> Account "savings": exit\n')),(0,s.kt)("p",null,"Send a micro amount from the main account to the savings address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet main\n> Account "main": send-micro [ADDRESS] 1\n> ...\n> INFO  Micro transaction sent:\n> transaction id: 0x...\n> Some(BlockId(0x...))\n> Account "main": exit\n')),(0,s.kt)("p",null,"Check the savings balance."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet savings\n> Account "savings": balance\n> ...\n> INFO  AccountBalance ...\n> Account "savings": exit\n')),(0,s.kt)("h2",{id:"native-tokens"},"Native tokens"),(0,s.kt)("h3",{id:"mint"},"Mint"),(0,s.kt)("p",null,"Mint native tokens, with foundry metadata, from the main account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet main\n> Account "main": mint-native-token 1000 1000 --foundry-metadata-hex 0xabcdef\n> ...\n> INFO  Native token minting transaction sent:\n> transaction id: 0x...\n> Some(BlockId(0x...))\n> Account "main": exit\n')),(0,s.kt)("h3",{id:"send"},"Send"),(0,s.kt)("p",null,"Generate a new address from the savings account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet savings\n> Account "savings": new-address\n> ...\n> INFO  Address 2: [ADDRESS]\n> Account "savings": exit\n')),(0,s.kt)("p",null,"Send native tokens to the savings address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet main\n> Account "main": sync\n> ...\n> INFO  Synced: AccountBalance ...TokenId([TOKEN ID])...\n> Account "main": send-native-token [ADDRESS] [TOKEN ID] 100\n> INFO  Native token transaction sent:\n> transaction id: 0x...\n> Some(BlockId(0x...))\n> Account "main": exit\n')),(0,s.kt)("h2",{id:"nfts"},"NFTs"),(0,s.kt)("h3",{id:"mint-1"},"Mint"),(0,s.kt)("p",null,"Mint an NFT."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet main\n> Account "main": mint-nft\n> ...\n> INFO  NFT minting transaction sent:\n> transaction id: 0x...\n> Some(BlockId(0x...))\n> Account "main": exit\n')),(0,s.kt)("h3",{id:"send-1"},"Send"),(0,s.kt)("p",null,"Generate a new address from the savings account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet savings\n> Account "savings": new-address\n> ...\n> INFO  Address 3: [ADDRESS]\n> Account "savings": exit\n')),(0,s.kt)("p",null,"Send the NFT to the savings address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet main\n> Account "main": sync\n> ...\n> INFO  Synced: AccountBalance ...NftId([NFT ID])...\n> Account "main": send-nft [ADDRESS] [NFT ID]\n> INFO  Nft transaction sent:\n> transaction id: 0x...\n> Some(BlockId(0x...))\n> Account "main": exit\n')),(0,s.kt)("h2",{id:"transactions"},"Transactions"),(0,s.kt)("p",null,"List the transactions of the main account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ ./wallet main\n> Account "main": transactions\n> ...\n> INFO  Transaction...\n> Account "main": exit\n')))}d.isMDXComponent=!0}}]);