"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[16698],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>h});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function c(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),l=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):c(c({},e),t)),a},m=function(t){var e=l(t.components);return n.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),u=l(a),h=r,d=u["".concat(s,".").concat(h)]||u[h]||p[h]||o;return a?n.createElement(d,c(c({ref:e},m),{},{components:a})):n.createElement(d,c({ref:e},m))}));function h(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,c=new Array(o);c[0]=u;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:r,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},98568:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={description:"Each smart contract instance has a program with a collection of entry points and a state.",image:"/img/tutorial/SC-structure.png",keywords:["smart contracts","structure","state","entry points","Wasm","explanation"]},c="Anatomy of a Smart Contract",i={unversionedId:"guide/core_concepts/smart-contract-anatomy",id:"guide/core_concepts/smart-contract-anatomy",title:"Anatomy of a Smart Contract",description:"Each smart contract instance has a program with a collection of entry points and a state.",source:"@site/shimmer/external/wasp/documentation/docs/guide/core_concepts/smart-contract-anatomy.md",sourceDirName:"guide/core_concepts",slug:"/guide/core_concepts/smart-contract-anatomy",permalink:"/shimmer/smart-contracts/guide/core_concepts/smart-contract-anatomy",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/master/documentation/shimmer/external/wasp/documentation/docs/guide/core_concepts/smart-contract-anatomy.md",tags:[],version:"current",frontMatter:{description:"Each smart contract instance has a program with a collection of entry points and a state.",image:"/img/tutorial/SC-structure.png",keywords:["smart contracts","structure","state","entry points","Wasm","explanation"]},sidebar:"tutorialSidebar",previous:{title:"State, Transitions, and State Anchoring",permalink:"/shimmer/smart-contracts/guide/core_concepts/states"},next:{title:"Calling a Smart Contract",permalink:"/shimmer/smart-contracts/guide/core_concepts/invocation"}},s={},l=[{value:"Identifying a Smart Contract",id:"identifying-a-smart-contract",level:2},{value:"State",id:"state",level:2},{value:"Entry Points",id:"entry-points",level:2},{value:"Execution Results",id:"execution-results",level:2},{value:"Error Handling",id:"error-handling",level:2}],m={toc:l};function p(t){let{components:e,...o}=t;return(0,r.kt)("wrapper",(0,n.Z)({},m,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"anatomy-of-a-smart-contract"},"Anatomy of a Smart Contract"),(0,r.kt)("p",null,"Smart contracts are programs that are immutably stored in the chain."),(0,r.kt)("p",null,"Through ",(0,r.kt)("em",{parentName:"p"},"VM abstraction"),", the ISC virtual machine is agnostic about the interpreter used to execute each smart contract.\nIt can support different ",(0,r.kt)("em",{parentName:"p"},"VM types")," (i.e., interpreters) simultaneously on the same chain.\nFor example, it is possible to have Wasm and EVM/Solidity smart contracts coexisting on the same chain."),(0,r.kt)("p",null,"The logical structure of IOTA Smart Contracts is independent of the VM type:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Smart Contract Structure",src:a(96526).Z,width:"862",height:"514"})),(0,r.kt)("h2",{id:"identifying-a-smart-contract"},"Identifying a Smart Contract"),(0,r.kt)("p",null,"Each smart contract on the chain is identified by a ",(0,r.kt)("em",{parentName:"p"},"hname"),' (pronounced "aitch-name"), which is a ',(0,r.kt)("inlineCode",{parentName:"p"},"uint32")," value\ncalculated as a hash of the smart contract's instance name (a string).\nFor example, the hname of the ",(0,r.kt)("a",{parentName:"p",href:"/shimmer/smart-contracts/guide/core_concepts/core_contracts/root"},(0,r.kt)("inlineCode",{parentName:"a"},"root"))," core contract is ",(0,r.kt)("inlineCode",{parentName:"p"},"0xcebf5908"),". This\nvalue uniquely identifies this contract in every chain."),(0,r.kt)("h2",{id:"state"},"State"),(0,r.kt)("p",null,"The smart contract state is the data owned by the smart contract and stored on the chain.\nThe state is a collection of key/value pairs.\nEach key and value are byte arrays of arbitrary size (there are practical limits set by the underlying database, of\ncourse).\nYou can think of the smart contract state as a _partition of the chain's data state, which can only be written by the\nsmart contract program itself."),(0,r.kt)("p",null,"The smart contract also owns an ",(0,r.kt)("em",{parentName:"p"},"account")," on the chain, stored as part of the chain state.\nThe smart contract account represents the balances of base tokens, native tokens, and NFTs controlled by the smart\ncontract."),(0,r.kt)("p",null,"The smart contract program can access its state and account through an interface layer called the ",(0,r.kt)("em",{parentName:"p"},"Sandbox"),".\nOnly the smart contract program can change its data state and spend from its\naccount. Tokens can be sent to the smart contract account by any other agent on\nthe ledger, be it a wallet with an address or another smart contract."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/shimmer/smart-contracts/guide/core_concepts/accounts/how-accounts-work"},"Accounts")," for more information on sending and receiving tokens."),(0,r.kt)("h2",{id:"entry-points"},"Entry Points"),(0,r.kt)("p",null,"Each smart contract has a program with a collection of ",(0,r.kt)("em",{parentName:"p"},"entry points"),".\nAn entry point is a function through which you can invoke the program."),(0,r.kt)("p",null,"There are two types of entry points:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Full entry points"),"(or simply ",(0,r.kt)("em",{parentName:"li"},"entry points"),"): These functions can modify\n(mutate) the smart contract's state."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"View entry points"),"(or ",(0,r.kt)("em",{parentName:"li"},"views"),"): These are read-only functions. They are only used\nto retrieve the information from the smart contract state. They cannot\nmodify the state, i.e., they are read-only calls.")),(0,r.kt)("h2",{id:"execution-results"},"Execution Results"),(0,r.kt)("p",null,"After a request to a Smart Contract is executed (a call to a full entry point), a ",(0,r.kt)("em",{parentName:"p"},"receipt")," will be added to\nthe ",(0,r.kt)("a",{parentName:"p",href:"/shimmer/smart-contracts/guide/core_concepts/core_contracts/blocklog"},(0,r.kt)("inlineCode",{parentName:"a"},"blocklog"))," core contract. The receipt details the execution results\nof said request: whether it was successful, the block it was included in, and other information.\nAny events dispatched by the smart contract in context of this execution will also be added to the receipt."),(0,r.kt)("h2",{id:"error-handling"},"Error Handling"),(0,r.kt)("p",null,"Smart contract calls can fail: for example, if they are interrupted for any reason (e.g., an exception) or if it\nproduces an error (missing parameter or other inconsistency).\nAny gas spent will be charged to the sender, and the error message or value is stored in the receipt."))}p.isMDXComponent=!0},96526:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/SC-structure-f91faed38e14c4123eb756f793b6a959.png"}}]);