"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[23604],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>m});var a=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(o),m=n,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return o?a.createElement(h,i(i({ref:t},p),{},{components:o})):a.createElement(h,i({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<r;c++)i[c]=o[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},88496:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=o(87462),n=(o(67294),o(3905));const r={description:"Deploying Wasm smart contracts with Solo.",image:"/img/tutorial/send_request.png",keywords:["testing","PostRequestSync","PostRequestOffLedger","send","requests","post","solo","on-ledger","off-ledger","how-to"]},i="Deploying Wasm Smart Contracts",s={unversionedId:"guide/solo/deploying-sc",id:"guide/solo/deploying-sc",title:"Deploying Wasm Smart Contracts",description:"Deploying Wasm smart contracts with Solo.",source:"@site/shimmer/external/wasp/documentation/docs/guide/solo/deploying-sc.md",sourceDirName:"guide/solo",slug:"/guide/solo/deploying-sc",permalink:"/shimmer/smart-contracts/guide/solo/deploying-sc",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/master/documentation/shimmer/external/wasp/documentation/docs/guide/solo/deploying-sc.md",tags:[],version:"current",frontMatter:{description:"Deploying Wasm smart contracts with Solo.",image:"/img/tutorial/send_request.png",keywords:["testing","PostRequestSync","PostRequestOffLedger","send","requests","post","solo","on-ledger","off-ledger","how-to"]},sidebar:"tutorialSidebar",previous:{title:"The L1 Ledger",permalink:"/shimmer/smart-contracts/guide/solo/the-l1-ledger"},next:{title:"Invoking Smart Contracts",permalink:"/shimmer/smart-contracts/guide/solo/invoking-sc"}},l={},c=[{value:"Deploy the Solo Tutorial",id:"deploy-the-solo-tutorial",level:2},{value:"Create a Default Wallet and Chain",id:"create-a-default-wallet-and-chain",level:3},{value:"DeployWasmContract Parameters",id:"deploywasmcontract-parameters",level:3},{value:"Deployer&#39;s Key Pair",id:"deployers-key-pair",level:4},{value:"Smart Contract Name",id:"smart-contract-name",level:4},{value:"AutoAdjustStorageDeposit",id:"autoadjuststoragedeposit",level:3}],p={toc:c};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"deploying-wasm-smart-contracts"},"Deploying Wasm Smart Contracts"),(0,n.kt)("admonition",{title:"WASM VM",type:"note"},(0,n.kt)("p",{parentName:"admonition"},"For more information about how to create Wasm smart contracts, refer to the ",(0,n.kt)("a",{parentName:"p",href:"/shimmer/smart-contracts/guide/wasm_vm/intro"},"Wasm VM chapter"),".")),(0,n.kt)("h2",{id:"deploy-the-solo-tutorial"},"Deploy the Solo Tutorial"),(0,n.kt)("p",null,"The following examples will make use of the\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/tree/develop/documentation/tutorial-examples/src/solotutorial.rs"},(0,n.kt)("inlineCode",{parentName:"a"},"solotutorial")," Rust/Wasm smart contract"),"\n."),(0,n.kt)("p",null,"In order to test the smart contract using Solo, first you need to deploy it. You can use the following code to\ndeploy ",(0,n.kt)("inlineCode",{parentName:"p"},"slotutorial_bg.wasm"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'func TestTutorialDeploySC(t *testing.T) {\n    env := solo.New(t, &solo.InitOptions{AutoAdjustStorageDeposit: true})\n    chain := env.NewChain()\n    err := chain.DeployWasmContract(nil, "solotutorial", "solotutorial_bg.wasm")\n    require.NoError(t, err)\n}\n')),(0,n.kt)("p",null,"This will work as long as the ",(0,n.kt)("inlineCode",{parentName:"p"},"solotutorial_bg.wasm")," file is in the same directory as the Go test code."),(0,n.kt)("h3",{id:"create-a-default-wallet-and-chain"},"Create a Default Wallet and Chain"),(0,n.kt)("p",null,"You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"NewChain()")," function to create a new wallet and deploys a new chain using said wallet, and other\ndefault parameters. You can access the wallet calling ",(0,n.kt)("inlineCode",{parentName:"p"},"chain.OriginatorPrivateKey"),"."),(0,n.kt)("h3",{id:"deploywasmcontract-parameters"},"DeployWasmContract Parameters"),(0,n.kt)("h4",{id:"deployers-key-pair"},"Deployer's Key Pair"),(0,n.kt)("p",null,"The first parameter to ",(0,n.kt)("inlineCode",{parentName:"p"},"DeployWasmContract"),"  is the key pair of the deployer of the smart contract. You can pass ",(0,n.kt)("inlineCode",{parentName:"p"},"nil"),"\nto use a default wallet, which can be accessed as ",(0,n.kt)("inlineCode",{parentName:"p"},"chain.OriginatorPrivateKey"),"."),(0,n.kt)("h4",{id:"smart-contract-name"},"Smart Contract Name"),(0,n.kt)("p",null,"The second parameter to ",(0,n.kt)("inlineCode",{parentName:"p"},"DeployWasmContract")," (",(0,n.kt)("inlineCode",{parentName:"p"},'"solotutorial"'),"), is the name assigned to the smart contract instance.\nSmart contract instance names must be unique across each chain."),(0,n.kt)("h3",{id:"autoadjuststoragedeposit"},"AutoAdjustStorageDeposit"),(0,n.kt)("p",null,"In the example above we enabled the ",(0,n.kt)("inlineCode",{parentName:"p"},"AutoAdjustStorageDeposit")," option.\nThis is necessary in order to automatically adjust all sent L1 transactions to include the storage deposit if\nnecessary (provided that the sender owns the funds)."),(0,n.kt)("p",null,'It is possible to disable the option and have manual control of the storage deposit, but in that case the deployment\nof the smart contract will have to be done "by hand".'),(0,n.kt)("p",null,"In most cases it is recommended to leave it enabled."))}d.isMDXComponent=!0}}]);