"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[93032],{79952:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>r});var o=t(87462),a=(t(67294),t(3905)),s=t(69319);const c={description:"Learn how to use the iota.js client library in a browser.",image:"/img/client_banner.png",keywords:["how to","example","browser","create address","connect to node","get node information"]},d="Display Client Data in a Browser",l={unversionedId:"how_tos/browser",id:"how_tos/browser",title:"Display Client Data in a Browser",description:"Learn how to use the iota.js client library in a browser.",source:"@site/shimmer/external/iota.js/documentation/docs/how_tos/browser.mdx",sourceDirName:"how_tos",slug:"/how_tos/browser",permalink:"/shimmer/iotajs/how_tos/browser",draft:!1,editUrl:"https://github.com/iotaledger/iota.js/tree/dev/packages/iota/documentation/shimmer/external/iota.js/documentation/docs/how_tos/browser.mdx",tags:[],version:"current",frontMatter:{description:"Learn how to use the iota.js client library in a browser.",image:"/img/client_banner.png",keywords:["how to","example","browser","create address","connect to node","get node information"]},sidebar:"docs",previous:{title:"Perform Proof of Work",permalink:"/shimmer/iotajs/how_tos/pow"},next:{title:"Mint an NFT",permalink:"/shimmer/iotajs/how_tos/mint_nft"}},i={},r=[{value:"Example Code",id:"example-code",level:2},{value:"Expected Output",id:"expected-output",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}],b={toc:r};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"display-client-data-in-a-browser"},"Display Client Data in a Browser"),(0,a.kt)("p",null,"The following example covers is based on the ",(0,a.kt)("a",{parentName:"p",href:"/shimmer/iotajs/how_tos/simple"},"How to Create a Simple Connection article"),", but it will log\nthe data in the browser instead of the command line interface. To run it, you simply need to open the ",(0,a.kt)("inlineCode",{parentName:"p"},".html")," file in\nyour browser of choice."),(0,a.kt)("h2",{id:"example-code"},"Example Code"),(0,a.kt)(s.Z,{className:"language-javascript",mdxType:"CodeBlock"},'<html>\n\n<head>\n    <title>iota.js Simple Browser Example</title>\n</head>\n\n<body>\n    <h1>iota.js Simple Browser Example</h1>\n    <pre id="console"></pre>\n    <script src="https://peterolson.github.io/BigInteger.js/BigInteger.min.js"><\/script>\n    <script src="../../../util/dist/cjs/index-browser.js"><\/script>\n    <script src="../../../crypto/dist/cjs/index-browser.js"><\/script>\n    <script src="../../dist/cjs/index-browser.js"><\/script>\n    <script src="../../../pow-browser/dist/pow-browser.js"><\/script>\n\n    <script>\n        function consoleLog(block, obj) {\n            const con = document.getElementById("console");\n            con.innerHTML += (block || "").replace("\\t", "&nbsp;&nbsp;&nbsp;") + " " + (obj !== undefined ? JSON.stringify(obj) : "") + "<br/>";\n        }\n        function consoleLink(lnk) {\n            const con = document.getElementById("console");\n            con.innerHTML += `<a href="${lnk}" target="_blank">${lnk}</a><br/>`;\n        }\n\n        async function run() {\n            Iota.setLogger(consoleLog);\n            // alphanet api endpoint: https://api.alphanet.iotaledger.net/\n            // localhost api endpoint: http://localhost:14265/\n            const API_ENDPOINT = "https://api.testnet.shimmer.network/"\n            const client = new Iota.SingleNodeClient(API_ENDPOINT, {powProvider: new IotaPowBrowser.BrowserPowProvider(5)});\n\n            const health = await client.health();\n            consoleLog("Is the node healthy", health ? "Yes" : "No");\n            consoleLog();\n\n            const info = await client.info();\n            consoleLog("Node Info");\n            Iota.logInfo("", info);\n            consoleLog();\n\n            const tipsResponse = await client.tips();\n            consoleLog("Tips");\n            Iota.logTips("", tipsResponse);\n            consoleLog();\n\n            const submitBlock = {\n                // Parents can be left undefined if you want the node to populate the field\n                parents: tipsResponse.tips.slice(0, Iota.MAX_NUMBER_PARENTS),\n                payload: {\n                    type: Iota.TAGGED_DATA_PAYLOAD_TYPE,\n                    tag: IotaUtil.Converter.utf8ToHex("Foo", true),\n                    data: IotaUtil.Converter.utf8ToHex("Bar", true)\n                }\n            };\n\n            const blockIdCreated = await client.blockSubmit(submitBlock, 5);\n            consoleLog("Submit Block:");\n            consoleLog("\\tBlock Id", blockIdCreated);\n            consoleLog();\n\n            const block = await client.block(blockIdCreated);\n            consoleLog("Get Block");\n            Iota.logBlock("", block);\n            consoleLog();\n\n            const blockMetadata = await client.blockMetadata(blockIdCreated);\n            consoleLog("Block Metadata");\n            Iota.logBlockMetadata("", blockMetadata);\n            consoleLog();\n\n            const blockRaw = await client.blockRaw(blockIdCreated);\n            consoleLog("Block Raw");\n            consoleLog("\\tRaw:", IotaUtil.Converter.bytesToHex(blockRaw));\n            consoleLog();\n\n            const decoded = Iota.deserializeBlock(new IotaUtil.ReadStream(blockRaw));\n            consoleLog("Block Decoded");\n            Iota.logBlock("", decoded);\n            consoleLog();\n\n            const milestone = await client.milestoneByIndex(info.status.latestMilestone.index);\n            consoleLog("Milestone");\n            consoleLog("\\tMilestone Index:", milestone.index);\n            consoleLog("\\tTimestamp:", milestone.timestamp);\n            consoleLog();\n\n            const output = await client.output("0x00000000000000000000000000000000000000000000000000000000000000000000");\n            consoleLog("Output");\n            consoleLog("\\tBlock Id:", output.metadata.blockId);\n            consoleLog("\\tTransaction Id:", output.metadata.transactionId);\n            consoleLog("\\tOutput Index:", output.metadata.outputIndex);\n            consoleLog("\\tIs Spent:", output.metadata.isSpent);\n            Iota.logOutput("\\t", output.output);\n            consoleLog();\n\n            await doTransfer(client, info);\n        }\n\n        async function doTransfer(client, nodeInfo) {\n            // These are the default values from the Hornet alphanet configuration\n            const mnemonic = "giant dynamic museum toddler six deny defense ostrich bomb access mercy blood explain muscle shoot shallow glad autumn author calm heavy hawk abuse rally";\n\n            // Generate the seed from the Mnemonic\n            const genesisSeed = Iota.Ed25519Seed.fromMnemonic(mnemonic);\n\n            consoleLog("Genesis");\n\n            const genesisPath = new IotaCrypto.Bip32Path("m/44\'/4218\'/0\'/0\'/0\'");\n\n            const genesisWalletSeed = genesisSeed.generateSeedFromPath(genesisPath);\n            const genesisWalletKeyPair = genesisWalletSeed.keyPair();\n            consoleLog("\\tSeed", IotaUtil.Converter.bytesToHex(genesisWalletSeed.toBytes()));\n\n            // Get the address for the path seed which is actually the Blake2b.sum256 of the public key\n            // display it in both Ed25519 and Bech 32 format\n            const genesisEd25519Address = new Iota.Ed25519Address(genesisWalletKeyPair.publicKey);\n            const genesisWalletAddress = genesisEd25519Address.toAddress();\n            const genesisWalletAddressHex = IotaUtil.Converter.bytesToHex(genesisWalletAddress, true);\n            const genesisWalletAddressBech32 = Iota.Bech32Helper.toBech32(Iota.ED25519_ADDRESS_TYPE, genesisWalletAddress, nodeInfo.protocol.bech32Hrp);\n            consoleLog("\\tAddress Ed25519", genesisWalletAddressHex);\n            consoleLog("\\tAddress Bech32", genesisWalletAddressBech32);\n\n            // Create a new seed for the wallet\n            const walletSeed = new Iota.Ed25519Seed(IotaUtil.Converter.hexToBytes("e57fb750f3a3a67969ece5bd9ae7eef5b2256a818b2aac458941f7274985a410"));\n\n            // Use the new seed like a wallet with Bip32 Paths 44,4128,accountIndex,isInternal,addressIndex\n            const walletPath = new IotaCrypto.Bip32Path("m/44\'/4218\'/0\'/0\'/0\'");\n            const walletAddressSeed = walletSeed.generateSeedFromPath(walletPath);\n            const walletEd25519Address = new Iota.Ed25519Address(walletAddressSeed.keyPair().publicKey);\n            const newAddress = walletEd25519Address.toAddress();\n            const newAddressHex = IotaUtil.Converter.bytesToHex(newAddress, true);\n            const newAddressBech32 = Iota.Bech32Helper.toBech32(Iota.ED25519_ADDRESS_TYPE, newAddress, nodeInfo.protocol.bech32Hrp);\n\n            consoleLog("Wallet 1");\n            consoleLog("\\tSeed:", IotaUtil.Converter.bytesToHex(walletSeed.toBytes()));\n            consoleLog("\\tPath:", walletPath.toString());\n            consoleLog(`\\tAddress Ed25519 ${walletPath.toString()}:`, newAddressHex);\n            consoleLog(`\\tAddress Bech32 ${walletPath.toString()}:`, newAddressBech32);\n            consoleLog();\n\n            // Because we are using the genesis address we must use send advanced as the input address is\n            // not calculated from a Bip32 path, if you were doing a wallet to wallet transfer you can just use send\n            // which calculates all the inputs/outputs for you\n            const indexerPlugin = new Iota.IndexerPluginClient(client);\n            const genesisAddressOutputs = await indexerPlugin.basicOutputs({ addressBech32: genesisWalletAddressBech32 });\n\n            const inputsWithKeyPairs = [];\n\n            let totalGenesis = bigInt(0);\n\n            for (let i = 0; i < genesisAddressOutputs.items.length; i++) {\n                const output = await client.output(genesisAddressOutputs.items[i]);\n                if (!output.metadata.isSpent) {\n                    inputsWithKeyPairs.push({\n                        input: {\n                            type: 0,\n                            transactionId: output.metadata.transactionId,\n                            transactionOutputIndex: output.metadata.outputIndex\n                        },\n                        addressKeyPair: genesisWalletKeyPair,\n                        consumingOutput: output.output\n                    });\n                    totalGenesis = totalGenesis.plus(output.output.amount);\n                }\n            }\n\n            const amountToSend = bigInt(213000);\n\n            const outputs = [\n                // This is the transfer to the new address\n                {\n                    address: newAddressHex,\n                    addressType: Iota.ED25519_ADDRESS_TYPE,\n                    amount: amountToSend\n                },\n                // Sending remainder back to genesis\n                {\n                    address: genesisWalletAddressHex,\n                    addressType: Iota.ED25519_ADDRESS_TYPE,\n                    amount: totalGenesis.minus(amountToSend)\n                }\n            ];\n\n            const { blockId } = await Iota.sendAdvanced(\n                client,\n                inputsWithKeyPairs,\n                outputs,\n                {\n                    tag: IotaUtil.Converter.utf8ToBytes("WALLET"),\n                    data: IotaUtil.Converter.utf8ToBytes("Not trinity")\n                }\n            );\n\n            consoleLog("Created Block Id", blockId);\n\n            const newAddressBalance = await Iota.getBalance(client, walletSeed, 0);\n            consoleLog("Wallet 1 Address Balance", newAddressBalance);\n\n            const unspentAddress = await Iota.getUnspentAddress(client, walletSeed, 0);\n            consoleLog("Wallet 1 First Unspent Address", unspentAddress);\n\n            const allUspentAddresses = await Iota.getUnspentAddresses(client, walletSeed, 0);\n            consoleLog("Wallet 1 Unspent Addresses", allUspentAddresses);\n        }\n\n        run()\n            .then(() => consoleLog("Done"))\n            .catch((err) => consoleLog(err.toString()));\n\n    <\/script>\n</body>\n\n</html>'),(0,a.kt)("h3",{id:"expected-output"},"Expected Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"\niota.js Simple Browser ExampleIs the node healthy Yes\n\nNode Info\n        Name: HORNET\n        Version: 2.0.0-alpha.23\n        Status\n                Is Healthy: true\n                Latest Milestone Index: 54851\n                Latest Milestone Timestamp: 1657543301\n                Latest Milestone Id: 0x49fe39afe197426e085fc5ce61ba2168307075d13b0b311407654d09532f7efa\n                Confirmed Milestone Index: 54851\n                Confirmed Milestone Timestamp: 1657543301\n                Confirmed Milestone Id: 0x49fe39afe197426e085fc5ce61ba2168307075d13b0b311407654d09532f7efa\n                Pruning Index: 0\n        Protocol\n                Network Name: alphanet-8\n                Bech32 HRP: rms\n                Token supply: 2779530283277761\n                Protocol version:\n                Min PoW Score: 1000\n                Rent\n                        VByte Cost: 500\n                        VByte Factor Data: 1\n                        VByte Factor Key: 10\n        Base token\n                Name: Shimmer\n                Ticker Symbol: SMR\n                Unit: SMR\n                Sub unit: glow\n                Decimals: 6\n                Use metric prefix: false\n        Metrics\n                Blocks Per Second: 5.6\n                Referenced Blocks Per Second: 4.8\n                Referenced Rate: 85.71428571428571\n        Features: []\n\nTips\n        Tip 1 Block Id: 0x05789c77904b4922004c04624aff85543442634044404ecec95c8498fcb95e49\n        Tip 2 Block Id: 0x5d9a4d67d86c5e5fefcbb884850e3a4ed0cb8b546fe2beb36059a150726dcfb7\n        Tip 3 Block Id: 0x7c6159ac6c6473ef1e36c4de298a6b77bbb84d0ad200cfdccca5ae9a396032e7\n        Tip 4 Block Id: 0xd270eba03af6b1af34845c2eebcfa6be4be225d4e3875a32d6fa7b763b88bfb2\n\nSubmit Block:\n        Block Id 0x844c9f8c363123774739acfc6ff60bc20bb61a6ddc829c9af6d3c8ccf3525111\n\nGet Block\n        Protocol Version: 2\n        Parent 1 Block Id: 0x05789c77904b4922004c04624aff85543442634044404ecec95c8498fcb95e49\n        Parent 2 Block Id: 0x5d9a4d67d86c5e5fefcbb884850e3a4ed0cb8b546fe2beb36059a150726dcfb7\n        Parent 3 Block Id: 0x7c6159ac6c6473ef1e36c4de298a6b77bbb84d0ad200cfdccca5ae9a396032e7\n        Parent 4 Block Id: 0xd270eba03af6b1af34845c2eebcfa6be4be225d4e3875a32d6fa7b763b88bfb2\n        Tagged Data Payload\n                Tag: Foo\n                Data: Bar\n        Nonce: 15372286728091295777\n\nBlock Metadata\n        Block Id: 0x844c9f8c363123774739acfc6ff60bc20bb61a6ddc829c9af6d3c8ccf3525111\n        Parent 1 Block Id: 0x05789c77904b4922004c04624aff85543442634044404ecec95c8498fcb95e49\n        Parent 2 Block Id: 0x5d9a4d67d86c5e5fefcbb884850e3a4ed0cb8b546fe2beb36059a150726dcfb7\n        Parent 3 Block Id: 0x7c6159ac6c6473ef1e36c4de298a6b77bbb84d0ad200cfdccca5ae9a396032e7\n        Parent 4 Block Id: 0xd270eba03af6b1af34845c2eebcfa6be4be225d4e3875a32d6fa7b763b88bfb2\n        Is Solid: true\n        Ledger Inclusion State:\n        Should Promote: false\n        Should Reattach: false\n\nBlock Raw\n        Raw: 0x020405789c77904b4922004c04624aff85543442634044404ecec95c8498fcb95e495d9a4d67d86c5e5fefcbb884850e3a4ed0cb8b546fe2beb36059a150726dcfb77c6159ac6c6473ef1e36c4de298a6b77bbb84d0ad200cfdccca5ae9a396032e7d270eba03af6b1af34845c2eebcfa6be4be225d4e3875a32d6fa7b763b88bfb20f0000000500000003466f6f0300000042617221605555555555d5\n\nBlock Decoded\n        Protocol Version: 2\n        Parent 1 Block Id: 0x05789c77904b4922004c04624aff85543442634044404ecec95c8498fcb95e49\n        Parent 2 Block Id: 0x5d9a4d67d86c5e5fefcbb884850e3a4ed0cb8b546fe2beb36059a150726dcfb7\n        Parent 3 Block Id: 0x7c6159ac6c6473ef1e36c4de298a6b77bbb84d0ad200cfdccca5ae9a396032e7\n        Parent 4 Block Id: 0xd270eba03af6b1af34845c2eebcfa6be4be225d4e3875a32d6fa7b763b88bfb2\n        Tagged Data Payload\n                Tag: Foo\n                Data: Bar\n        Nonce: 15372286728091295777\n\nLatest Milestone Payload\n        Milestone Index: 54851\n        Included Merkel Root 0xb46f508b2dcd240cbc927453eeae3e7f800a9a0f8e0415ce577acea50da039cf\n        Applied Merkel Root 0x0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8\n        Previous Milestone Id: 0x5432f5761fdb156e14add8227ae7c48085011ca2097679e08e4d33fa2e34379d\n        Timestamp: 1657543301\n\nOutput\n        Block Id: 0x0000000000000000000000000000000000000000000000000000000000000000\n        Transaction Id: 0x0000000000000000000000000000000000000000000000000000000000000000\n        Output Index: 0\n        Is Spent: true\n        Basic Output\n                        Amount: 2779530283277761\n                        Native Tokens\n                        Unlock Conditions\n                                                Address Unlock Condition\n                                                        Ed25519 Address\n                                                                Public Key Hash: 0x3845105b59429361a75b3203a6e24e16d19540aad6bd1936449b62f1c4bbe5da\n                        Features\n\nDone\n")),(0,a.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,a.kt)("p",null,"If you are getting the following error, it means your local Proof of Work is taking too long to finish.  By the time it\nfinishes the parent blocks are no longer valid. You can use ",(0,a.kt)("a",{parentName:"p",href:"/shimmer/iotajs/how_tos/simple"},"simple connection")," how-to that showcases the\nfunctionalities as this example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Error: invalid parameter, error: block is below max depth: invalid block: code=400, message=invalid parameter\n")))}p.isMDXComponent=!0}}]);