"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[84492],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),h=a,f=u["".concat(l,".").concat(h)]||u[h]||p[h]||r;return n?i.createElement(f,o(o({ref:t},c),{},{components:n})):i.createElement(f,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=n(87462),a=(n(67294),n(3905));const r={title:"Alias Output",sidebar_label:"Alias Output",description:"UTXO Alias Ouput",image:"/img/Identity_icon.png",keywords:["public keys","utxo","Method Specification","Decentralized Identifiers","overview","DLT"]},o="Alias Output",s={unversionedId:"concepts/decentralized_identifiers/alias",id:"concepts/decentralized_identifiers/alias",title:"Alias Output",description:"UTXO Alias Ouput",source:"@site/shimmer/external/identity.rs/0.7-alpha/documentation/docs/concepts/decentralized_identifiers/alias.md",sourceDirName:"concepts/decentralized_identifiers",slug:"/concepts/decentralized_identifiers/alias",permalink:"/shimmer/identity.rs/concepts/decentralized_identifiers/alias",draft:!1,editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/documentation/shimmer/external/identity.rs/0.7-alpha/documentation/docs/concepts/decentralized_identifiers/alias.md",tags:[],version:"current",frontMatter:{title:"Alias Output",sidebar_label:"Alias Output",description:"UTXO Alias Ouput",image:"/img/Identity_icon.png",keywords:["public keys","utxo","Method Specification","Decentralized Identifiers","overview","DLT"]},sidebar:"docs",previous:{title:"Introduction",permalink:"/shimmer/identity.rs/concepts/decentralized_identifiers/overview"},next:{title:"Create and Publish",permalink:"/shimmer/identity.rs/concepts/decentralized_identifiers/create"}},l={},d=[{value:"Storage Deposit",id:"storage-deposit",level:3},{value:"Alias Id",id:"alias-id",level:3}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"alias-output"},"Alias Output"),(0,a.kt)("p",null,"The IOTA method uses the IOTA ledger which uses the ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.iota.org/goshimmer/protocol_specification/components/ledgerstate"},"unspent transaction output (UTXO) model"),". Also, the features of the ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.iota.org/introduction/develop/explanations/what_is_stardust"},"Stardust")," upgrade are fundamental to the IOTA DID method."),(0,a.kt)("p",null,"The Alias Output is used for storing the DID Document on the ledger. It is a specific implementation of the UTXO state machine that can hold arbitrary data in its ",(0,a.kt)("inlineCode",{parentName:"p"},"State Metadata"),". The Alias Output has two kinds of controllers, a state controller and a governor. A state controller can execute a state transition which allows updating the data in the ",(0,a.kt)("inlineCode",{parentName:"p"},"State Metadata"),". The governor, on the contrary, can't update the ",(0,a.kt)("inlineCode",{parentName:"p"},"State Metadata")," but can change both controllers and destroy the Alias Output.\nA controller can be either Ed25519 Address, Alias Address or an NFT Address and at most one of each can be set for an Alias Output."),(0,a.kt)("p",null,"In order to create a new Alias Output, a transaction must be made that includes another Output, for example a Basic Output, as input and the new Alias Output, along with other outputs if needed, as outputs."),(0,a.kt)("h3",{id:"storage-deposit"},"Storage Deposit"),(0,a.kt)("p",null,"The arbitrary data stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"State Metadata")," of the Alias output must be covered by a storage deposit using IOTA coins. This helps to control the ledger size from growing uncontrollably while guaranteeing the data is indefinitely stored on the ledger which is important for resolving DID Documents. This deposit is fully refundable and can be reclaimed when the output is destroyed. Both, the state controller and the governor can control the IOTA coins stored in the Alias Output. Nodes expose an API to calculate the required deposit depending on the size of the data stored. "),(0,a.kt)("h3",{id:"alias-id"},"Alias Id"),(0,a.kt)("p",null,"Each Alias Output has an ",(0,a.kt)("inlineCode",{parentName:"p"},"Alias ID"),". This ID is assigned after a transaction creates a new Alias Output. The actual DID is derived from this ",(0,a.kt)("inlineCode",{parentName:"p"},"Alias ID"),", hence it is be unknown before publishing the transaction. Consequently, the DID inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"State Metadata")," will be replaced by the placeholder ",(0,a.kt)("inlineCode",{parentName:"p"},"did:0:0")," to indicate self. "),(0,a.kt)("p",null,"If a transaction has an Alias Output as input, its ",(0,a.kt)("inlineCode",{parentName:"p"},"Alias ID")," can be kept by one of its outputs. This feature is necessary for updating the DID Documents since the DID itself is derived from the Alias Output."))}p.isMDXComponent=!0}}]);