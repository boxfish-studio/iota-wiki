"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[73569],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>u});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},m=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),h=l(t),u=i,d=h["".concat(s,".").concat(u)]||h[u]||c[u]||o;return t?n.createElement(d,a(a({ref:r},m),{},{components:t})):n.createElement(d,a({ref:r},m))}));function u(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=h;var p={};for(var s in r)hasOwnProperty.call(r,s)&&(p[s]=r[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var l=2;l<o;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},39308:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var n=t(87462),i=(t(67294),t(3905));const o={description:"The IOTA foundation provides load-balanced public Shimmer endpoints where MQTT and the HTTP REST API are enabled.",image:"/img/logo/preview.png",keywords:["shimmer","MQTT","REST API","HTTP","Explorer","reference"]},a="Shimmer",p={unversionedId:"reference/networks/shimmer",id:"reference/networks/shimmer",title:"Shimmer",description:"The IOTA foundation provides load-balanced public Shimmer endpoints where MQTT and the HTTP REST API are enabled.",source:"@site/shimmer/external/introduction-docs/docs/reference/networks/shimmer.md",sourceDirName:"reference/networks",slug:"/reference/networks/shimmer",permalink:"/shimmer/introduction/reference/networks/shimmer",draft:!1,editUrl:"https://github.com/iotaledger/chrysalis-docs/edit/develop/docs/shimmer/external/introduction-docs/docs/reference/networks/shimmer.md",tags:[],version:"current",frontMatter:{description:"The IOTA foundation provides load-balanced public Shimmer endpoints where MQTT and the HTTP REST API are enabled.",image:"/img/logo/preview.png",keywords:["shimmer","MQTT","REST API","HTTP","Explorer","reference"]},sidebar:"mySidebar",previous:{title:"Shimmer Beta",permalink:"/shimmer/introduction/reference/networks/betanet"},next:{title:"Resources",permalink:"/shimmer/introduction/resources"}},s={},l=[{value:"Public Infrastructure",id:"public-infrastructure",level:2},{value:"Developer Tools",id:"developer-tools",level:2}],m={toc:l};function c(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"shimmer"},"Shimmer"),(0,i.kt)("h2",{id:"public-infrastructure"},"Public Infrastructure"),(0,i.kt)("p",null,"The IOTA Foundation currently provides these public load-balanced Shimmer endpoints:"),(0,i.kt)("p",null,"Node API: ",(0,i.kt)("a",{parentName:"p",href:"https://api.shimmer.network"},"https://api.shimmer.network"),"\nExample info endpoint: ",(0,i.kt)("a",{parentName:"p",href:"https://api.shimmer.network/api/core/v2/info"},"https://api.shimmer.network/api/core/v2/info"),"\nAvailable routes: ",(0,i.kt)("a",{parentName:"p",href:"https://api.shimmer.network/api/routes"},"https://api.shimmer.network/api/routes"),"\nHealth endpoint: ",(0,i.kt)("a",{parentName:"p",href:"https://api.shimmer.network/health"},"https://api.shimmer.network/health"),"\nMQTT: wss://api.shimmer.network:443/api/mqtt/v1\nChronicle API: ",(0,i.kt)("a",{parentName:"p",href:"https://chronicle.shimmer.network"},"https://chronicle.shimmer.network")),(0,i.kt)("p",null,"These endpoints have MQTT (via WebSockets) exposed and offer the HTTP REST API (according to the specifications ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/tips/blob/main/tips/TIP-0025/tip-0025.md"},"TIP-25"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/tips/blob/main/tips/TIP-0026/tip-0026.md"},"TIP-26")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/tips/blob/main/tips/TIP-0028/tip-0028.md"},"TIP-28"),") over TLS"),(0,i.kt)("h2",{id:"developer-tools"},"Developer Tools"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://explorer.shimmer.network"},"Explorer"),".")))}c.isMDXComponent=!0}}]);