"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[11411],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,m=p["".concat(l,".").concat(u)]||p[u]||d[u]||r;return n?i.createElement(m,o(o({ref:t},h),{},{components:n})):i.createElement(m,o({ref:t},h))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},99600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const r={image:"/img/integration-services/logo/integration_services.png",keywords:["how to","subscribe to channel","immutable data channel","Channel","Subscriber","authorize","Identity","CLI","Verifiable Credential"],description:"How to create Identities, Channels and how to subscribe to a channel, authorize a Subscriber and write data into a Channel."},o="Create Identities",s={unversionedId:"how_tos/is-cli/create-identities",id:"how_tos/is-cli/create-identities",title:"Create Identities",description:"How to create Identities, Channels and how to subscribe to a channel, authorize a Subscriber and write data into a Channel.",source:"@site/iota/external/integration-services/production/documentation/docs/how_tos/is-cli/create-identities.md",sourceDirName:"how_tos/is-cli",slug:"/how_tos/is-cli/create-identities",permalink:"/integration-services/how_tos/is-cli/create-identities",draft:!1,editUrl:"https://github.com/iotaledger/integration-services/edit/develop/documentation/iota/external/integration-services/production/documentation/docs/how_tos/is-cli/create-identities.md",tags:[],version:"current",frontMatter:{image:"/img/integration-services/logo/integration_services.png",keywords:["how to","subscribe to channel","immutable data channel","Channel","Subscriber","authorize","Identity","CLI","Verifiable Credential"],description:"How to create Identities, Channels and how to subscribe to a channel, authorize a Subscriber and write data into a Channel."},sidebar:"docs",previous:{title:"CLI for Integration Services",permalink:"/integration-services/how_tos/is-cli/introduction"},next:{title:"Integration Services SDK",permalink:"/integration-services/how_tos/is-cli/authenticate-your-identity"}},l={},c=[{value:"Create json files",id:"create-json-files",level:3},{value:"Create the Identities",id:"create-the-identities",level:3},{value:"Create a Channel",id:"create-a-channel",level:3},{value:"Write to Channel",id:"write-to-channel",level:3},{value:"Request Subscription",id:"request-subscription",level:3},{value:"Authorize Subscription",id:"authorize-subscription",level:3},{value:"Write Message as a Subscriber",id:"write-message-as-a-subscriber",level:3},{value:"Read Channel",id:"read-channel",level:3},{value:"Read History of Channel",id:"read-history-of-channel",level:3},{value:"Revoke Subscription",id:"revoke-subscription",level:3},{value:"Find Subscription",id:"find-subscription",level:3},{value:"Help",id:"help",level:3}],h={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-identities"},"Create Identities"),(0,a.kt)("p",null,"In this example we will show how to create Identities, Channels and how to subscribe to a channel, authorize a Subscriber and write data into a Channel."),(0,a.kt)("h3",{id:"create-json-files"},"Create json files"),(0,a.kt)("p",null,"First create two files ",(0,a.kt)("inlineCode",{parentName:"p"},"identityA.json")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"identitiyB.json")," for creating these Identities with the CLI in the next step. Rename the ",(0,a.kt)("inlineCode",{parentName:"p"},"username")," field in ",(0,a.kt)("inlineCode",{parentName:"p"},"identityB.json")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"actorB"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "username": "actorA",\n  "claimType": "User",\n  "claim": {\n    "name": "John",\n    "surname": "Smith"\n  }\n}\n')),(0,a.kt)("h3",{id:"create-the-identities"},"Create the Identities"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is create-identity -i how_tos/identityA.json -o identityA.json \n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is create-identity -i how_tos/identityB.json -o identityB.json \n")),(0,a.kt)("h3",{id:"create-a-channel"},"Create a Channel"),(0,a.kt)("p",null,"Next we will create a private Channel with a topic ",(0,a.kt)("inlineCode",{parentName:"p"},"logs")," and the source ",(0,a.kt)("inlineCode",{parentName:"p"},"device")," and save the created Channel in a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"channelA.json"),". For public Channels add the option ",(0,a.kt)("inlineCode",{parentName:"p"},"-pC"),". For public Channels a subscriber is automatically authorized to the Channel but can't write into it. The user can read the history of this channel with the command ",(0,a.kt)("inlineCode",{parentName:"p"},"is read-channel-history"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is create-channel -i identityA.json -t logs -s device -o channelA.json test-channel\n")),(0,a.kt)("h3",{id:"write-to-channel"},"Write to Channel"),(0,a.kt)("p",null,"The creator of the Channel can directly write into it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'is write-channel -i identityA.json -p "hello world" -c channelA.json\n')),(0,a.kt)("h3",{id:"request-subscription"},"Request Subscription"),(0,a.kt)("p",null,"Other users need to subscribe to a Channel first."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is subscribe-channel -i identityB.json -c channelA.json\n")),(0,a.kt)("h3",{id:"authorize-subscription"},"Authorize Subscription"),(0,a.kt)("p",null,"The creator of the Channel authorizes a subscriber."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is authorize-subscription -i identityA.json -c channelA.json <Id of identityB>\n")),(0,a.kt)("h3",{id:"write-message-as-a-subscriber"},"Write Message as a Subscriber"),(0,a.kt)("p",null,"After the authorization the subscriber can write into the Channel."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'is write-channel -i identityB.json -p "Can you hear me?" -c channelA.json\n')),(0,a.kt)("h3",{id:"read-channel"},"Read Channel"),(0,a.kt)("p",null,"The subscriber can read the Channel entries but only ones created after he/she was authorized to the Channel."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is read-channel -i identityB.json -c channelA.json\n")),(0,a.kt)("h3",{id:"read-history-of-channel"},"Read History of Channel"),(0,a.kt)("p",null,"The user can also read the history of a Channel."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is read-channel-history -i identityB.json -c channelA.json -sK <preshared key of channelA> \n")),(0,a.kt)("p",null,"Especially if the Channel is ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," it is the only way for the subscriber to read from the Channel. For that add the option ",(0,a.kt)("inlineCode",{parentName:"p"},"-pC")," and remove the option for the preshared Key ",(0,a.kt)("inlineCode",{parentName:"p"},"-sK"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is read-channel-history -i identityB.json -c channelA.json -pC\n")),(0,a.kt)("h3",{id:"revoke-subscription"},"Revoke Subscription"),(0,a.kt)("p",null,"At any time the creator of a Channel can revoke the Subscription of other users."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is revoke-subscription -i identityA.json -c channelA.json -sI <Id of identityB>\n")),(0,a.kt)("h3",{id:"find-subscription"},"Find Subscription"),(0,a.kt)("p",null,"We can also double check if the Subscription is revoked by simply trying to find it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is find-subscription -i identityA.json -c channelA.json -sI <Id of identityB> \n")),(0,a.kt)("h3",{id:"help"},"Help"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is help\n")),(0,a.kt)("p",null,"For one specific command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"is <command> --help\n")))}d.isMDXComponent=!0}}]);