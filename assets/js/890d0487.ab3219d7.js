"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[90030],{3905:(e,r,t)=>{t.d(r,{Zo:()=>i,kt:()=>m});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function p(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?p(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},p=Object.keys(e);for(a=0;a<p.length;a++)t=p[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)t=p[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=a.createContext({}),o=function(e){var r=a.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},i=function(e){var r=o(e.components);return a.createElement(d.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},u=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,p=e.originalType,d=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),u=o(t),m=n,f=u["".concat(d,".").concat(m)]||u[m]||c[m]||p;return t?a.createElement(f,l(l({ref:r},i),{},{components:t})):a.createElement(f,l({ref:r},i))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var p=t.length,l=new Array(p);l[0]=u;var s={};for(var d in r)hasOwnProperty.call(r,d)&&(s[d]=r[d]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var o=2;o<p;o++)l[o]=t[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},70743:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>p,metadata:()=>s,toc:()=>o});var a=t(87462),n=(t(67294),t(3905));const p={},l=void 0,s={unversionedId:"reference/java_api/AddressWrapper",id:"reference/java_api/AddressWrapper",title:"AddressWrapper",description:"from(address, bech32_hrp): AddressWrapper",source:"@site/iota/external/wallet.rs/production/documentation/docs/reference/java_api/AddressWrapper.mdx",sourceDirName:"reference/java_api",slug:"/reference/java_api/AddressWrapper",permalink:"/wallet.rs/reference/java_api/AddressWrapper",draft:!1,editUrl:"https://github.com/iotaledger/wallet.rs/edit/production/documentation/iota/external/wallet.rs/production/documentation/docs/reference/java_api/AddressWrapper.mdx",tags:[],version:"current",frontMatter:{}},d={},o=[{value:"from(address, bech32_hrp): AddressWrapper",id:"fromaddress-bech32_hrp-addresswrapper",level:3},{value:"parse(address): AddressWrapper",id:"parseaddress-addresswrapper",level:3},{value:"toBech32(): String",id:"tobech32-string",level:3}],i={toc:o};function c(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},i,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"fromaddress-bech32_hrp-addresswrapper"},"from(address, bech32_hrp): ",(0,n.kt)("a",{parentName:"h3",href:"#addresswrapper"},"AddressWrapper")),(0,n.kt)("p",null,"Create an Address based on its address and Bech segments"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"address"),(0,n.kt)("td",{parentName:"tr",align:null},"String"),(0,n.kt)("td",{parentName:"tr",align:null},"The Address segment")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"bech32_hrp"),(0,n.kt)("td",{parentName:"tr",align:null},"String"),(0,n.kt)("td",{parentName:"tr",align:null},"the bech segment")))),(0,n.kt)("h3",{id:"parseaddress-addresswrapper"},"parse(address): ",(0,n.kt)("a",{parentName:"h3",href:"#addresswrapper"},"AddressWrapper")),(0,n.kt)("p",null,"parse a fully functional address string into an AddressWrapper"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"address"),(0,n.kt)("td",{parentName:"tr",align:null},"String"),(0,n.kt)("td",{parentName:"tr",align:null},"The address we will parse")))),(0,n.kt)("h3",{id:"tobech32-string"},"toBech32(): String"),(0,n.kt)("p",null,"Get the bech segment of the address"))}c.isMDXComponent=!0}}]);