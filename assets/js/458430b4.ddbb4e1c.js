"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[40144],{62474:(t,e,n)=>{n.d(e,{ZP:()=>o});var a=n(87462),s=(n(67294),n(3905));const i={toc:[]};function o(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,a.Z)({},i,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{title:"EXPLANATION: Outputs",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"You can learn more about Outputs in the\n",(0,s.kt)("a",{parentName:"p",href:"/iota.rs/explanations/messages_payloads_and_transactions"},"Messages, Payloads and Transactions")," section.")))}o.isMDXComponent=!0},46333:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>S,contentTitle:()=>v,default:()=>E,frontMatter:()=>x,metadata:()=>w,toc:()=>O});var a=n(87462),s=(n(67294),n(3905)),i=n(34259),o=n(18679),u=n(69319),p=n(49962);const r=p.Z.indexOf("public static void getOutputs"),l=p.Z.indexOf("public static void simpleMessage"),d=p.Z.substring(r,l),c={toc:[{value:"Client.get_address().outputs(address: String, options: OutputOptions)",id:"clientget_addressoutputsaddress-string-options-outputoptions",level:2},{value:"Client.getOutput(output_id: String)",id:"clientgetoutputoutput_id-string",level:2},{value:"Client.findOutputs(output_ids:String[], addresses:String[])",id:"clientfindoutputsoutput_idsstring-addressesstring",level:2}]};function m(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientget_addressoutputsaddress-string-options-outputoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_address().outputs(address: String, options: OutputOptions)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientgetoutputoutput_id-string"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getOutput(str)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientfindoutputsoutput_idsstring-addressesstring"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.findOutputs(output_ids, addresses)")),":")),(0,s.kt)("h2",{id:"clientget_addressoutputsaddress-string-options-outputoptions"},"Client.get_address().outputs(address: String, options: OutputOptions)"),(0,s.kt)("p",null,"This ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/java/api_reference#outputsaddress-options-balanceaddressresponse"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_address().outputs(address: String, options: OutputOptions)")),"\nexpects an address in Bech32 format and will get all outputs that use a given address.  You can use ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/java/api_reference#outputsoptions"},"OutputOptions")," to limit the returned results."),(0,s.kt)(u.Z,{className:"language-java",mdxType:"CodeBlock"},d),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f360000",\n  "7614ba900a90b130707766a660a454942ac7cc4adea3fb9ad0cdca90114417c20000",\n  "768c20c15a290e02a43b83263a98501b9d7eb0b57da40a9247289c672de63ea60000"\n]\n')),(0,s.kt)("h2",{id:"clientgetoutputoutput_id-string"},"Client.getOutput(output_id: String)"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/java/api_reference#getoutputoutput_id-outputresponse"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getOutput(output_id: String)"))," function to get metadata about the an ",(0,s.kt)("inlineCode",{parentName:"p"},"output_id"),":"),(0,s.kt)("h2",{id:"clientfindoutputsoutput_idsstring-addressesstring"},"Client.findOutputs(output_ids:String[], addresses:String[])"),(0,s.kt)("p",null,"The\n",(0,s.kt)("a",{parentName:"p",href:"./../libraries/java/api_reference#findoutputsoutput_ids-addresses-outputresponse"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.findOutputs(output_ids:String[], addresses:String[])")),"\nfunction expects an array of Strings representing the output ids to look up, as well as an array of Strings representing\nthe addresses to look up."))}m.isMDXComponent=!0;var g=n(62474);const f={toc:[{value:"Client.getAddressOutputs(str)",id:"clientgetaddressoutputsstr",level:2},{value:"Client.getOutput(str)",id:"clientgetoutputstr",level:2},{value:"Client.findOutputs(output_ids (optional), addresses (optional))",id:"clientfindoutputsoutput_ids-optional-addresses-optional",level:2}]};function h(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,a.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientgetoutputstr"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getAddressOutputs(str)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientgetoutputstr"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getOutput(str)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientfindoutputsoutput_ids-optional-addresses-optional"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.findOutputs(output_ids (optional), addresses (optional))")),":")),(0,s.kt)("h2",{id:"clientgetaddressoutputsstr"},"Client.getAddressOutputs(str)"),(0,s.kt)("p",null,"This ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/nodejs/api_reference#getaddressoutputsaddress-options-promisestring"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getAddressOutputs(str)"))," expects an address in Bech32 format and returns a ",(0,s.kt)("inlineCode",{parentName:"p"},"str[]")," of ",(0,s.kt)("inlineCode",{parentName:"p"},"output_ids"),"."),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},"async function run() {\n    const { ClientBuilder } = require('@iota/client');\n\n    // client will connect to testnet by default\n    const client = new ClientBuilder().build();\n\n    const outputs = await client.getAddressOutputs('atoi1qp9427varyc05py79ajku89xarfgkj74tpel5egr9y7xu3wpfc4lkpx0l86');\n    console.log(outputs);\n}\n\nrun()\n"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f360000",\n  "7614ba900a90b130707766a660a454942ac7cc4adea3fb9ad0cdca90114417c20000",\n  "768c20c15a290e02a43b83263a98501b9d7eb0b57da40a9247289c672de63ea60000"\n]\n')),(0,s.kt)("h2",{id:"clientgetoutputstr"},"Client.getOutput(str)"),(0,s.kt)("p",null,"You can use the ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/nodejs/api_reference#getoutputoutputid-promise"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getOutput(str)"))," function to get metadata about the an ",(0,s.kt)("inlineCode",{parentName:"p"},"output_id"),":"),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},"async function run() {\n    const { ClientBuilder } = require('@iota/client');\n\n    // client will connect to testnet by default\n    const client = new ClientBuilder().build();\n\n    const output = await client.getOutput('a22cba0667c922cbb1f8bdcaf970b2a881ccd6e88e2fcce50374de2aac7c37720000');\n    console.log(output);\n}\n\nrun()\n"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "messageId": "f303bc90a5ed3ef15af5fc6aa81a739978c59458a71e68ce8e380f1f534da1e6",\n  "transactionId": "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f36",\n  "outputIndex": 0,\n  "isSpent": false,\n  "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n  "amount": 1000000\n}\n')),(0,s.kt)("h2",{id:"clientfindoutputsoutput_ids-optional-addresses-optional"},"Client.findOutputs(output_ids (optional), addresses (optional))"),(0,s.kt)("p",null,"The function ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/nodejs/api_reference#findoutputsoutputids-addresses-promiseoutputmetadata"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.findOutputs()"))," is a convenient shortcut combining both ",(0,s.kt)("inlineCode",{parentName:"p"},"Client.getAddressOutputs(str)")," and\n",(0,s.kt)("inlineCode",{parentName:"p"},"Client.getOutput(str)")," methods in a single call. It supports two arguments, a list of ",(0,s.kt)("inlineCode",{parentName:"p"},"output_ids")," or a list of\n",(0,s.kt)("inlineCode",{parentName:"p"},"addresses"),"."),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},"async function run() {\n    const { ClientBuilder } = require('@iota/client');\n\n    // client will connect to testnet by default\n    const client = new ClientBuilder().build();\n\n    const outputs = await client.findOutputs(outputIds = [], addresses = [\"atoi1qp9427varyc05py79ajku89xarfgkj74tpel5egr9y7xu3wpfc4lkpx0l86\"]);\n    console.log(outputs);\n}\n\nrun()\n"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "messageId": "f303bc90a5ed3ef15af5fc6aa81a739978c59458a71e68ce8e380f1f534da1e6",\n    "transactionId": "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f36",\n    "outputIndex": 0,\n    "isSpent": false,\n    "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n    "amount": 1000000\n  },\n  {\n    "messageId": "825266a79c0ffb6001ed263eb150357863b7d0052627c5766e8ef5acd6fed533",\n    "transactionId": "768c20c15a290e02a43b83263a98501b9d7eb0b57da40a9247289c672de63ea6",\n    "outputIndex": 0,\n    "isSpent": false,\n    "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n    "amount": 1000000\n  }\n]\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"messageId"),": Refers to the encapsulating message in which the transaction was sent."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"transactionId"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"outputIndex"),": Refers to the output within the ",(0,s.kt)("inlineCode",{parentName:"li"},"SignedTransaction")," payload. There may be several\n",(0,s.kt)("inlineCode",{parentName:"li"},"outputs")," involved in a single transaction, so the ",(0,s.kt)("inlineCode",{parentName:"li"},"transactionId")," by itself would not be enough."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"output"),": This section provides details about the iota address to which the given\n",(0,s.kt)("a",{parentName:"li",href:"/iota.rs/explanations/messages_payloads_and_transactions#unspent-transaction-output-utxo"},"unspent transaction output")," is coupled with."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"amount"),": States an amount of tokens related to the ",(0,s.kt)("inlineCode",{parentName:"li"},"output"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"isSpent"),": Indicates whether the given ",(0,s.kt)("inlineCode",{parentName:"li"},"output")," is a part of the actual ledger state or not. As mentioned in the\n",(0,s.kt)("a",{parentName:"li",href:"/iota.rs/explanations/messages_payloads_and_transactions#unspent-transaction-output-utxo"},"Messages, Payloads, and Transactions section"),",\nif an output was already spent it is not part of the ledger state any more and is replaced by some other ",(0,s.kt)("inlineCode",{parentName:"li"},"output(s)"),"\nin the process.")),(0,s.kt)("p",null,"Notice that the ",(0,s.kt)("inlineCode",{parentName:"p"},"outputId")," that was used in a function call to get output details is the same as a combination of the\n",(0,s.kt)("inlineCode",{parentName:"p"},"transactionId")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"outputIndex"),". This way a transaction is tightly coupled with ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs")," since the\n",(0,s.kt)("inlineCode",{parentName:"p"},"SignedTransaction")," payload is a main vehicle to create and spend ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs"),", and everything is encapsulated in a\n",(0,s.kt)("a",{parentName:"p",href:"/iota.rs/explanations/messages_payloads_and_transactions#Messages"},"message"),"."))}h.isMDXComponent=!0;const k={toc:[{value:"Client.get_address_outputs(address, options (optional))",id:"clientget_address_outputsaddress-options-optional",level:2},{value:"Client.get_output(output_id)",id:"clientget_outputoutput_id",level:2},{value:"Client.find_outputs(output_ids (optional), addresses (optional))",id:"clientfind_outputsoutput_ids-optional-addresses-optional",level:2}]};function _(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,a.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientget_address_outputsaddress-options-optionall"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_address_outputs(str)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientget_outputoutput_id"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_output(str)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientfind_outputsoutput_ids-optional-addresses-optional"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.find_outputs(output_ids (optional), addresses (optional))")))),(0,s.kt)("h2",{id:"clientget_address_outputsaddress-options-optional"},"Client.get_address_outputs(address, options (optional))"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/python/api_reference#get_address_outputsaddress-options-optional-listutxoinput"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_address_outputs(str)"))," function expects an address in Bech32 format and returns a ",(0,s.kt)("inlineCode",{parentName:"p"},"str[]")," of\n",(0,s.kt)("inlineCode",{parentName:"p"},"output_ids"),"."),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},'import iota_client\nclient = iota_client.Client()\n\noutputs = client.get_address_outputs("atoi1qp9427varyc05py79ajku89xarfgkj74tpel5egr9y7xu3wpfc4lkpx0l86")\nfor output in outputs:\n    print(f"Output index: {output[\'index\']}; raw transaction id: {output[\'transaction_id\']}")\n    encoded_hex = "".join(f"{i:0>2x}" for i in output["transaction_id"] + list(int(output["index"]).to_bytes(2, \'little\')))\n    print(f"`output_id` encoded in hex: {encoded_hex}")\n'),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-plaintext"},"Output index: 0; raw transaction id: [162, 44, 186, 6, 103, 201, 34, 203, 177, 248, 189, 202, 249, 112, 178, 168, 129, 204, 214, 232, 142, 47, 204, 229, 3, 116, 222, 42, 172, 124, 55, 114]\n`output_id` encoded in hex: a22cba0667c922cbb1f8bdcaf970b2a881ccd6e88e2fcce50374de2aac7c37720000\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"UTXO")," output is represented by output ",(0,s.kt)("inlineCode",{parentName:"li"},"index")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"transaction_id"),". ",(0,s.kt)("inlineCode",{parentName:"li"},"transaction_id")," is basically a list of 32\n",(0,s.kt)("inlineCode",{parentName:"li"},"bytes"),". ",(0,s.kt)("inlineCode",{parentName:"li"},"index")," is 2-bytes (16bits) ",(0,s.kt)("inlineCode",{parentName:"li"},"uint"),"."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"index")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"transaction_id")," are usually combined into single hex string of 68 characters = 32 ","*"," 2 chars\n(",(0,s.kt)("inlineCode",{parentName:"li"},"transaction_id"),"; 32 bytes in hex) + 4 chars (",(0,s.kt)("inlineCode",{parentName:"li"},"index"),"; 2 bytes in hex).")),(0,s.kt)("p",null,"The resulting ",(0,s.kt)("inlineCode",{parentName:"p"},"output_id")," is the unique id of the given ",(0,s.kt)("inlineCode",{parentName:"p"},"output"),"."),(0,s.kt)("h2",{id:"clientget_outputoutput_id"},"Client.get_output(output_id)"),(0,s.kt)("p",null,"You can use the ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/python/api_reference#get_outputoutput_id-outputresponse"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_output(output_id)"))," function to get metadata about the an ",(0,s.kt)("inlineCode",{parentName:"p"},"output_id"),":"),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},'import iota_client\nclient = iota_client.Client()\n\nprint(\n    client.get_output("a22cba0667c922cbb1f8bdcaf970b2a881ccd6e88e2fcce50374de2aac7c37720000")\n)'),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message_id": "f303bc90a5ed3ef15af5fc6aa81a739978c59458a71e68ce8e380f1f534da1e6",\n  "transaction_id": "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f36",\n  "output_index": 0,\n  "is_spent": false,\n  "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n  "amount": 1000000\n}\n')),(0,s.kt)("h2",{id:"clientfind_outputsoutput_ids-optional-addresses-optional"},"Client.find_outputs(output_ids (optional), addresses (optional))"),(0,s.kt)("p",null,"The function ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/python/api_reference#find_outputsoutput_ids-optional-addresses-optional-listoutputresponse"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.find_outputs(output_ids (optional), addresses (optional))"))," is a convenient shortcut combining both\n",(0,s.kt)("inlineCode",{parentName:"p"},"Client.get_address_outputs(str)")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Client.get_output(str)")," methods in a single call. It supports two arguments, a\nlist of ",(0,s.kt)("inlineCode",{parentName:"p"},"output_ids")," or a list of ",(0,s.kt)("inlineCode",{parentName:"p"},"addresses"),"."),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},'import iota_client\nclient = iota_client.Client()\n\nclient.find_outputs(addresses=["atoi1qp9427varyc05py79ajku89xarfgkj74tpel5egr9y7xu3wpfc4lkpx0l86"])'),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "message_id": "f303bc90a5ed3ef15af5fc6aa81a739978c59458a71e68ce8e380f1f534da1e6",\n    "transaction_id": "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f36",\n    "output_index": 0,\n    "is_spent": false,\n    "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n    "amount": 1000000\n  },\n  {\n    "message_id": "825266a79c0ffb6001ed263eb150357863b7d0052627c5766e8ef5acd6fed533",\n    "transaction_id": "768c20c15a290e02a43b83263a98501b9d7eb0b57da40a9247289c672de63ea6",\n    "output_index": 0,\n    "is_spent": false,\n    "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n    "amount": 1000000\n  }\n]\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"message_id"),": Refers to the encapsulating message in which the transaction was sent."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"transaction_id"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"output_index"),": Refers to the output within the ",(0,s.kt)("inlineCode",{parentName:"li"},"SignedTransaction")," payload. There may be several\n",(0,s.kt)("inlineCode",{parentName:"li"},"outputs")," involved in a single transaction, so the ",(0,s.kt)("inlineCode",{parentName:"li"},"transaction_id")," by itself would not be enough."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"output"),": This section provides details about the iota address to which the given\n",(0,s.kt)("a",{parentName:"li",href:"/iota.rs/explanations/messages_payloads_and_transactions#unspent-transaction-output-utxo"},"unspent transaction output"),"\nis coupled with."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"amount"),": States an amount of tokens related to the ",(0,s.kt)("inlineCode",{parentName:"li"},"output"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"is_spent"),": Indicates whether the given ",(0,s.kt)("inlineCode",{parentName:"li"},"output")," is a part of the actual ledger state or not. As mentioned in the\n",(0,s.kt)("a",{parentName:"li",href:"/iota.rs/explanations/messages_payloads_and_transactions#unspent-transaction-output-utxo"},"Messages, Payloads, and Transactions section"),",\nif an output was already spent it is not part of the ledger state any more and is replaced by some other ",(0,s.kt)("inlineCode",{parentName:"li"},"output(s)"),"\nin the process.")),(0,s.kt)("p",null,"Notice that the ",(0,s.kt)("inlineCode",{parentName:"p"},"output_id")," that was used in a function call to get output details is the same as a combination of the\n",(0,s.kt)("inlineCode",{parentName:"p"},"transaction_id")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"output index"),". This way a transaction is tightly coupled with ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs")," since the\n",(0,s.kt)("inlineCode",{parentName:"p"},"SignedTransaction")," payload is a main vehicle to create and spend ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs"),", and everything is encapsulated in a\n",(0,s.kt)("a",{parentName:"p",href:"/iota.rs/explanations/messages_payloads_and_transactions#messages"},(0,s.kt)("inlineCode",{parentName:"a"},"message")),"."))}_.isMDXComponent=!0;const N={toc:[{value:"Client.get_address.get_output( output_id: &amp;UtxoInput)",id:"clientget_addressget_output-output_id-utxoinput",level:2},{value:"Client.get_output(output_id: &amp;UtxoInput)",id:"clientget_outputoutput_id-utxoinput",level:2},{value:"Client.find_outputs(outputs: &amp;UtxoInput, addresses: &amp;String)",id:"clientfind_outputsoutputs-utxoinput-addresses-string",level:2}]};function b(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,a.Z)({},N,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientget_addressget_output-output_id-utxoinput"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_address.get_output( output_id: &UtxoInput)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientget_outputoutput_id-utxoinput"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_output(output_id: &UtxoInput)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientfind_outputsoutputs-utxoinput-addresses-string"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.find_outputs(outputs: &[UtxoInput], addresses: &[String])")),":")),(0,s.kt)("h2",{id:"clientget_addressget_output-output_id-utxoinput"},"Client.get_address.get_output( output_id: &UtxoInput)"),(0,s.kt)("p",null,"The\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/iota-client/latest/iota_client/client/struct.Client.html#method.get_output"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.get_address.get_output( output_id: &UtxoInput)")),"\nfunction expects an address in Bech32 format and returns a ",(0,s.kt)("inlineCode",{parentName:"p"},"str[]")," of ",(0,s.kt)("inlineCode",{parentName:"p"},"output_ids"),"."),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 05_get_address_outputs --release\n\nuse iota_client::{Client, Result};\n\n/// In this example we will get the outputs of a known address\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\n        .finish()\n        .await?;\n\n    let address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n    let outputs = iota.get_address().outputs(address, Default::default()).await.unwrap();\n\n    println!("The outputs of address {:?} are: {:?}", address, outputs);\n    Ok(())\n}\n'),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f360000",\n  "7614ba900a90b130707766a660a454942ac7cc4adea3fb9ad0cdca90114417c20000",\n  "768c20c15a290e02a43b83263a98501b9d7eb0b57da40a9247289c672de63ea60000"\n]\n')),(0,s.kt)("h2",{id:"clientget_outputoutput_id-utxoinput"},"Client.get_output(output_id: &UtxoInput)"),(0,s.kt)("p",null,"The\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/iota-client/latest/iota_client/client/struct.Client.html#method.get_output"},"Client.get_output(output_id: &UtxoInput)"),"\nfunction finds an output by its ",(0,s.kt)("inlineCode",{parentName:"p"},"transaction_id")," and corresponding ",(0,s.kt)("inlineCode",{parentName:"p"},"output_index"),"."),(0,s.kt)("h2",{id:"clientfind_outputsoutputs-utxoinput-addresses-string"},"Client.find_outputs(outputs: &","[UtxoInput]",", addresses: &","[String]",")"),(0,s.kt)("p",null,"The\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/iota-client/latest/iota_client/client/struct.Client.html#method.find_outputs"},"Client.find_outputs(outputs: &[UtxoInput], addresses: &[String])"),"\nfunction supports two arguments, a list of ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs")," or a list of ",(0,s.kt)("inlineCode",{parentName:"p"},"addresses")," and will return all the outputs related to\nthe requested criteria."))}b.isMDXComponent=!0;const C={toc:[{value:"Client.getAddress().outputs(str)",id:"clientgetaddressoutputsstr",level:2},{value:"Client.getOutput(str)",id:"clientgetoutputstr",level:2},{value:"Client.findOutputs(output_ids (optional), addresses (optional))",id:"clientfindoutputsoutput_ids-optional-addresses-optional",level:2}]};function y(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,a.Z)({},C,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientgetaddressoutputsstr"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getAddress().outputs(str)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientgetoutputstr"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getOutput(str)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clientfindoutputsoutput_ids-optional-addresses-optional"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.findOutputs(output_ids (optional), addresses (optional))")))),(0,s.kt)("h2",{id:"clientgetaddressoutputsstr"},"Client.getAddress().outputs(str)"),(0,s.kt)("p",null,"This\n",(0,s.kt)("a",{parentName:"p",href:"./../libraries/wasm/api_reference#getaddressbuilderoutputsaddress-options--promiseany"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getAddress().outputs(str)")),"\nexpects an address in Bech32 format and returns a ",(0,s.kt)("inlineCode",{parentName:"p"},"str[]")," of ",(0,s.kt)("inlineCode",{parentName:"p"},"output_ids"),"."),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},"async function run() {\n    const { ClientBuilder } = require('../node')\n\n    // client will connect to testnet by default\n    const client = await new ClientBuilder().build();\n\n    const outputs = await client.getAddress().outputs('atoi1qp9427varyc05py79ajku89xarfgkj74tpel5egr9y7xu3wpfc4lkpx0l86', { includeSpent: false, outputType: \"SignatureLockedSingle\" });\n    console.log(outputs);\n}\n\nrun()\n"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f360000",\n  "7614ba900a90b130707766a660a454942ac7cc4adea3fb9ad0cdca90114417c20000",\n  "768c20c15a290e02a43b83263a98501b9d7eb0b57da40a9247289c672de63ea60000"\n]\n')),(0,s.kt)("h2",{id:"clientgetoutputstr"},"Client.getOutput(str)"),(0,s.kt)("p",null,"The function ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/wasm/api_reference#clientgetoutputoutput_id--promiseany"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.getOutput(str)"))," can be\nused to get metadata about the given ",(0,s.kt)("inlineCode",{parentName:"p"},"output_id"),":"),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},"async function run() {\n    const { ClientBuilder } = require('../node')\n\n    // client will connect to testnet by default\n    const client = await new ClientBuilder().build();\n\n    const output = await client.getOutput('3e18e19045d0b44dd2be3c466d6fe419c09342bacdb587f2985f2e607a92e38e0100');\n    console.log(output);\n}\n\nrun()\n"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "messageId": "f303bc90a5ed3ef15af5fc6aa81a739978c59458a71e68ce8e380f1f534da1e6",\n  "transactionId": "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f36",\n  "outputIndex": 0,\n  "isSpent": false,\n  "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n  "amount": 1000000\n}\n')),(0,s.kt)("h2",{id:"clientfindoutputsoutput_ids-optional-addresses-optional"},"Client.findOutputs(output_ids (optional), addresses (optional))"),(0,s.kt)("p",null,"The function ",(0,s.kt)("a",{parentName:"p",href:"./../libraries/wasm/api_reference#clientfindoutputsoutputs-addresses--promiseany"},(0,s.kt)("inlineCode",{parentName:"a"},"Client.findOutputs()")),"\nis a convenient shortcut combining both ",(0,s.kt)("inlineCode",{parentName:"p"},"Client.getAddressOutputs(str)")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Client.getOutput(str)")," methods in a single\ncall. It supports two arguments, a list of ",(0,s.kt)("inlineCode",{parentName:"p"},"output_ids")," or a list of ",(0,s.kt)("inlineCode",{parentName:"p"},"addresses"),"."),(0,s.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},"async function run() {\n    const { ClientBuilder } = require('../node')\n\n    // client will connect to testnet by default\n    const client = await new ClientBuilder().build();\n\n    const outputs = await client.findOutputs(outputIds = [], addresses = [\"atoi1qp9427varyc05py79ajku89xarfgkj74tpel5egr9y7xu3wpfc4lkpx0l86\"]);\n    console.log(outputs);\n}\n\nrun()\n"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Output example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "messageId": "f303bc90a5ed3ef15af5fc6aa81a739978c59458a71e68ce8e380f1f534da1e6",\n    "transactionId": "0f2d5d2651f8061a9f5417d0658009f32b2e3f77f9706b0be3b4b3f466171f36",\n    "outputIndex": 0,\n    "isSpent": false,\n    "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n    "amount": 1000000\n  },\n  {\n    "messageId": "825266a79c0ffb6001ed263eb150357863b7d0052627c5766e8ef5acd6fed533",\n    "transactionId": "768c20c15a290e02a43b83263a98501b9d7eb0b57da40a9247289c672de63ea6",\n    "outputIndex": 0,\n    "isSpent": false,\n    "address": "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r",\n    "amount": 1000000\n  }\n]\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"messageId"),": Refers to the encapsulating message in which the transaction was sent."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"transactionId"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"outputIndex"),": Refers to the output within the ",(0,s.kt)("inlineCode",{parentName:"li"},"SignedTransaction")," payload. There may be several\n",(0,s.kt)("inlineCode",{parentName:"li"},"outputs")," involved in a single transaction, so the ",(0,s.kt)("inlineCode",{parentName:"li"},"transactionId")," by itself would not be enough."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"output"),": This section provides details about the iota address to which the given\n",(0,s.kt)("a",{parentName:"li",href:"#unspent-transaction-output-utxo"},"unspent transaction output")," is coupled with."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"amount"),": States an amount of tokens related to the ",(0,s.kt)("inlineCode",{parentName:"li"},"output"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"isSpent"),": Indicates whether the given ",(0,s.kt)("inlineCode",{parentName:"li"},"output")," is a part of the actual ledger state or not. As mentioned in the\n",(0,s.kt)("a",{parentName:"li",href:"/iota.rs/explanations/messages_payloads_and_transactions#unspent-transaction-output-utxo"},"Messages, Payloads, and Transactions section"),",\nif an output was already spent it is not part of the ledger state any more and is replaced by some other ",(0,s.kt)("inlineCode",{parentName:"li"},"output(s)"),"\nin the process.")),(0,s.kt)("p",null,"Notice that the ",(0,s.kt)("inlineCode",{parentName:"p"},"outputId")," that was used in a function call to get output details is the same as a combination of the\n",(0,s.kt)("inlineCode",{parentName:"p"},"transactionId")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"outputIndex"),". This way a transaction is tightly coupled with ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs")," since the\n",(0,s.kt)("inlineCode",{parentName:"p"},"SignedTransaction")," payload is a main vehicle to create and spend ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs"),", and everything is encapsulated in a\n",(0,s.kt)("a",{parentName:"p",href:"/iota.rs/explanations/messages_payloads_and_transactions#messages"},"message"),"."))}y.isMDXComponent=!0;const x={title:"Get Outputs",description:"There are three functions you can use to get Unspent Transaction Output (UTXO) outputs related an address Client.getAddressOutputs(str), Client.getOutput(str), and Client.findOutputs(output_ids (optional), addresses (optional)).",image:"/img/logo/iota_mark_light.png",keywords:["how to","unspent transactions output","UTXO","address","nodejs","Client","get_outputs","get_output","find_outputs"]},v=void 0,w={unversionedId:"examples/get_outputs",id:"examples/get_outputs",title:"Get Outputs",description:"There are three functions you can use to get Unspent Transaction Output (UTXO) outputs related an address Client.getAddressOutputs(str), Client.getOutput(str), and Client.findOutputs(output_ids (optional), addresses (optional)).",source:"@site/iota/external/iota.rs/production/documentation/docs/examples/get_outputs.mdx",sourceDirName:"examples",slug:"/examples/get_outputs",permalink:"/iota.rs/examples/get_outputs",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/production/documentation/iota/external/iota.rs/production/documentation/docs/examples/get_outputs.mdx",tags:[],version:"current",frontMatter:{title:"Get Outputs",description:"There are three functions you can use to get Unspent Transaction Output (UTXO) outputs related an address Client.getAddressOutputs(str), Client.getOutput(str), and Client.findOutputs(output_ids (optional), addresses (optional)).",image:"/img/logo/iota_mark_light.png",keywords:["how to","unspent transactions output","UTXO","address","nodejs","Client","get_outputs","get_output","find_outputs"]},sidebar:"docs",previous:{title:"Check a Balance",permalink:"/iota.rs/examples/get_balance"},next:{title:"Post a Message",permalink:"/iota.rs/examples/simple_message"}},S={},O=[],T={toc:O};function E(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,a.Z)({},T,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)(g.ZP,{mdxType:"KeyConceptOutputs"}),(0,s.kt)("p",null,"There are three functions you can use to get\n",(0,s.kt)("a",{parentName:"p",href:"/iota.rs/explanations/messages_payloads_and_transactions#unspent-transaction-output-utxo"},"Unspent Transaction Output (UTXO)"),"\noutputs related an address."),(0,s.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(m,{mdxType:"JavaGetOutputs"})),(0,s.kt)(o.Z,{value:"nodejs",label:"Nodejs",mdxType:"TabItem"},(0,s.kt)(h,{mdxType:"NodejsGetOutputs"})),(0,s.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(_,{mdxType:"PythonGetOutputs"})),(0,s.kt)(o.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,s.kt)(b,{mdxType:"RustGetOutputs"})),(0,s.kt)(o.Z,{value:"wasm",label:"Wasm",mdxType:"TabItem"},(0,s.kt)(y,{mdxType:"WasmGetOutputs"}))))}E.isMDXComponent=!0},18679:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(67294),s=n(86010);const i="tabItem_Ymn6";function o(t){let{children:e,hidden:n,className:o}=t;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(i,o),hidden:n},e)}},34259:(t,e,n)=>{n.d(e,{Z:()=>m});var a=n(87462),s=n(67294),i=n(86010),o=n(51048),u=n(33609),p=n(1943),r=n(72957);const l="tabList__CuJ",d="tabItem_LNqP";function c(t){var e;const{lazy:n,block:o,defaultValue:c,values:m,groupId:g,className:f}=t,h=s.Children.map(t.children,(t=>{if((0,s.isValidElement)(t)&&"value"in t.props)return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=m??h.map((t=>{let{props:{value:e,label:n,attributes:a}}=t;return{value:e,label:n,attributes:a}})),_=(0,u.l)(k,((t,e)=>t.value===e.value));if(_.length>0)throw new Error(`Docusaurus error: Duplicate values "${_.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===c?c:c??(null==(e=h.find((t=>t.props.default)))?void 0:e.props.value)??h[0].props.value;if(null!==N&&!k.some((t=>t.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${k.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:C}=(0,p.U)(),[y,x]=(0,s.useState)(N),v=[],{blockElementScrollPositionUntilNextRender:w}=(0,r.o5)();if(null!=g){const t=b[g];null!=t&&t!==y&&k.some((e=>e.value===t))&&x(t)}const S=t=>{const e=t.currentTarget,n=v.indexOf(e),a=k[n].value;a!==y&&(w(e),x(a),null!=g&&C(g,String(a)))},O=t=>{var e;let n=null;switch(t.key){case"ArrowRight":{const e=v.indexOf(t.currentTarget)+1;n=v[e]??v[0];break}case"ArrowLeft":{const e=v.indexOf(t.currentTarget)-1;n=v[e]??v[v.length-1];break}}null==(e=n)||e.focus()};return s.createElement("div",{className:(0,i.Z)("tabs-container",l)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},f)},k.map((t=>{let{value:e,label:n,attributes:o}=t;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===e?0:-1,"aria-selected":y===e,key:e,ref:t=>v.push(t),onKeyDown:O,onFocus:S,onClick:S},o,{className:(0,i.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":y===e})}),n??e)}))),n?(0,s.cloneElement)(h.filter((t=>t.props.value===y))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},h.map(((t,e)=>(0,s.cloneElement)(t,{key:e,hidden:t.props.value!==y})))))}function m(t){const e=(0,o.Z)();return s.createElement(c,(0,a.Z)({key:String(e)},t))}},49962:(t,e,n)=>{n.d(e,{Z:()=>a});const a='package org.iota.client.example;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport org.iota.client.*;\nimport org.iota.client.local.*;\n\npublic class ExampleApp {\n\n    protected static final String MAINNET = "https://chrysalis-nodes.iota.cafe";\n\n    // Faucet: https://faucet.chrysalis-devnet.iota.cafe/\n    // Explorer: https://explorer.iota.org/devnet\n    protected static final String TESTNET = "https://api.lb-0.h.chrysalis-devnet.iota.cafe";\n    protected static final String TESTNET_LB = "api.lb-0.h.chrysalis-devnet.iota.cafe";\n\n    protected static final String NODE = TESTNET;\n\n    static {\n        NativeAPI.verifyLink();\n    }\n\n    public static void main(String[] args) {\n\n        try {\n            new ExampleApp();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public ExampleApp() {\n\n    }\n\n    private static Client node() {\n        Client iota = Client.Builder().withNode(NODE) // Insert your node URL here\n                // .withNodeAuth("https://somechrysalisiotanode.com", "jwt_or_null",\n                // "name_or_null", "password_or_null") //\n                // Optional authentication\n                .finish();\n        return iota;\n    }\n\n    public static void nodeInfo() {\n        try {\n            Client iota = node();\n\n            System.out.println("Node healthy: " + iota.getHealth());\n\n            NodeInfoWrapper info = iota.getInfo();\n            System.out.println("Node url: " + info.url());\n            System.out.println("Node Info: " + info.nodeInfo());\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void generateSeed() {\n        try {\n            SecretKey secret_key = SecretKey.generate();\n            System.out.println(RustHex.encode(secret_key.toBytes()));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void generateAddresses() {\n        try {\n            Client iota = node();\n\n            String seed = RustHex.encode("NONSECURE_USE_OF_DEVELOPMENT_SEED_1");\n            String[] addresses = GetAddressesBuilder.from(seed).withClient(iota).withRange(0, 10).finish();\n            System.out.println(Arrays.toString(addresses));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getBalance() {\n        try {\n            Client iota = node();\n\n            String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n            long seed_balance = iota.getBalance(seed).finish();\n            System.out.println("Account balance: " + seed_balance);\n\n            String address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n            BalanceAddressResponse response = iota.getAddress().balance(address);\n            System.out.println("The balance of " + address + " is " + response.balance());\n\n            UtxoInput[] outputs = iota.getAddress().outputs(address, new OutputsOptions());\n            System.out.println("The outputs of address " + address + " are: " + Arrays.toString(outputs));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getOutputs() {\n        try {\n            Client iota = node();\n\n            String address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n            UtxoInput[] outputs = iota.getAddress().outputs(address, new OutputsOptions());\n            System.out.println("The outputs of address " + address + " are: " + Arrays.toString(outputs));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void simpleMessage() {\n        try {\n            Client iota = node();\n            Message message = iota.message().finish();\n\n            System.out.println(\n                    "Empty message sent: https://explorer.iota.org/mainnet/message/" + message.id().toString());\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getMessageMetadata() {\n        try {\n            Client iota = node();\n            Message message = iota.message().finish();\n\n            MessageMetadata metadata = iota.getMessage().metadata(message.id());\n\n            System.out.println("Message metadata: " + metadata);\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getDataMessage() {\n        Client iota = node();\n\n        Message message = iota.message().withIndexString("Hello").withDataString("Tangle").finish();\n\n        System.out.println("Message sent https://explorer.iota.org/devnet/message/" + message.id());\n\n        MessageId[] fetched_message_ids = iota.getMessage().indexString("Hello");\n        System.out.println("Messages with Hello index: " + Arrays.toString(fetched_message_ids));\n    }\n\n    public static void transaction() {\n        Client iota = node();\n\n        String seed_1 = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n        Message message = iota\n            .message()\n            .withSeed(seed_1)\n            // Insert the output address and amount to spent. The amount cannot be zero.\n            .withOutput(\n                // We generate an address from our seed so that we send the funds to ourselves\n                        iota.getAddresses(seed_1).withRange(0, 1).finish()[0], 1000000\n            ).finish();\n\n        System.out.println("Transaction sent: https://explorer.iota.org/devnet/message/" +  message.id());\n    }\n\n    public static void mqtt() {\n        Client iota = node();\n\n        MqttListener listener = new MqttListener() {\n            @Override\n            public void onEvent(TopicEvent event) {\n                System.out.println(event);\n            }\n        };\n\n        // TODO: Make listeners with the Sync trait\n        // iota.subscriber().withTopic(Topic.from("messages")).subscribe(listener);\n    }\n\n    public static void consolidate() {\n        Client iota = node();\n\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n        // Here all funds will be send to the address with the lowest index in the range\n        String address = Util.consolidateFunds(iota, seed, 0, 0, 150);\n\n        System.out.println("Funds consolidated to" + address);\n    }\n\n    public static void createMaxDust(){\n        Client iota = node();\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n        String seed_2 = "NONSECURE_USE_OF_DEVELOPMENT_SEED_2";\n\n        String[] new_addresses = iota.getAddresses(seed_2).withRange(0, 1).finish();\n\n        Message dustAllowanceMessage = iota\n            .message()\n            .withSeed(seed)\n            .withDustAllowanceOutput(new_addresses[0], 10_000_000)\n            .finish();\n\n        MessageWrap[] msgs = iota.retryUntilIncluded(dustAllowanceMessage.id(), -1, -1);\n\n        // Split funds to own addresses\n        String[] addresses = iota\n            .getAddresses(seed)\n            // We start from index 1 so we can send remaining balance to the address with index 0\n            .withRange(1, 101)\n            .finish();\n\n        ClientMessageBuilder message_builder = iota.message().withSeed(seed);\n        for (String address : addresses) {\n            // Make sure to re-set the builder as the instance is a clone of the old one due to JNI limits\n            message_builder = message_builder.withOutput(address, 1_000_001);\n        }\n        Message message = message_builder.finish();\n\n        System.out.println(\n            "First transaction sent: https://explorer.iota.org/devnet/message/" + message.id()\n        );\n\n        msgs = iota.retryUntilIncluded(message.id(), -1, -1);\n\n        // At this point we have 100 Mi on 100 addresses and we will just send it to the final address\n        // We use the outputs directly so we don\'t double spend them\n        \n        List<UtxoInput> initial_outputs = new ArrayList<>();\n        Optional<MessagePayload> payload = message.payload();\n        if (payload.isPresent() && payload.get().payloadType().equals(MessagePayloadType.TRANSACTION)) {\n            TransactionPayload tx = payload.get().asTransaction();\n            RegularEssence essence = tx.essence().asRegular();\n            Output[] outputs = essence.outputs();\n            for (int index = 0; index < outputs.length; index++) {\n                Output output = outputs[index];\n                if (output.asSignatureLockedSingleOutput().amount() == 1_000_001) {\n                    initial_outputs.add(UtxoInput.from(tx.id(), index));\n                } \n            }\n        }\n\n        String[] first_address_old_seed = iota.getAddresses(seed).withRange(0, 1).finish();\n        List<MessageId> sent_messages = new ArrayList<>();\n        for (UtxoInput input : initial_outputs) {\n            MessageId message_id = iota\n                .message()\n                    .withSeed(seed).withInput(input).withInputRange(1, 101).withOutput(new_addresses[0], 1)\n                // send remaining iotas back\n                    .withOutput(first_address_old_seed[0], 1_000_000)\n                .finish()\n                    .id();\n            System.out.printf("Transaction %i sent: https://explorer.iota.org/devnet/message/%s" + input.index(),\n                    message_id\n            );\n            sent_messages.add(message_id);\n        }\n        // only check last message, if this gets confirmed all other messages should also be confirmed\n        msgs = iota.retryUntilIncluded(sent_messages.get(sent_messages.size() - 1), -1, -1);\n        // Send all funds back to first address\n        long total_balance = iota.getBalance(seed).finish();\n\n        System.out.println("Total balance: " + total_balance);\n\n        message = iota\n            .message()\n            .withSeed(seed)\n            .withOutput(first_address_old_seed[0], total_balance)\n            .finish();\n\n        System.out.println("Final tx sent: https://explorer.iota.org/devnet/message/" + message.id());\n\n        msgs = iota.retryUntilIncluded(message.id(), -1, -1);\n    }\n\n    public static void customPayload() {\n        // Create a client instance\n        Client iota = node();\n\n        IndexationPayload indexation_payload = IndexationPayload.fromStrings("Your Index", "Your Data");\n\n        Message message = iota.message().finishIndex(indexation_payload);\n\n        System.out.printf("Message ID: %s", message.id());\n    }\n\n    public static void offlineExample() {\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n        String toAddress = "atoi1qruzprxum2934lr3p77t96pzlecxv8pjzvtjrzdcgh2f5exa22n6gek0qdq";\n        long amount = 1_000_000;\n\n        Offline offlineExample = new Offline(NODE, seed);\n        String[] inputAddresses = offlineExample.generateAddresses();\n        String preparedData = offlineExample.prepareTransaction(inputAddresses, toAddress, amount);\n        System.out.println("Prepared data: " + preparedData);\n        String signedData = offlineExample.signTransaction(preparedData);\n        System.out.println("Signed data: " + signedData);\n\n        Message message = offlineExample.sendMessage(signedData);\n\n        System.out.printf("Message ID: %s", message.id());\n    }\n}\n'}}]);