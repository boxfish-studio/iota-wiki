"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[72058],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),l=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(r),u=a,y=m["".concat(d,".").concat(u)]||m[u]||c[u]||s;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6625:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const s={toc:[]};function i(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Seed Mnemonics/Phrases",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"In modern wallet implementations such as the ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.iota.org/wallet.rs/welcome"},"wallet.rs library")," and the\n",(0,a.kt)("a",{parentName:"p",href:"https://blog.iota.org/firefly-beta-release/"},"firefly wallet"),", the seed is usually generated from a ",(0,a.kt)("inlineCode",{parentName:"p"},"seed mnemonic"),"\n(",(0,a.kt)("inlineCode",{parentName:"p"},"seed phrase"),"), using ",(0,a.kt)("a",{parentName:"p",href:"https://en.bitcoin.it/wiki/BIP_0039"},"BIP39 standard"),", to be better memorized/stored by humans.\nIt is based on a randomly generated list of english words and later used to generate the seed. The seed is a root for\nall generated private keys and addresses.")))}i.isMDXComponent=!0;const o={description:"IOTA uses the `Ed25519` signature scheme and addresses are usually represented by Bech32 (checksummed base32) format string of 64 characters.",image:"/img/libraries/messages_in_tangle.svg",keywords:["explanation","seeds","ED2519","signature scheme","random seed","seed generator","private key"]},d="Seeds",l={unversionedId:"explanations/seeds",id:"explanations/seeds",title:"Seeds",description:"IOTA uses the `Ed25519` signature scheme and addresses are usually represented by Bech32 (checksummed base32) format string of 64 characters.",source:"@site/iota/external/iota.rs/production/documentation/docs/explanations/seeds.mdx",sourceDirName:"explanations",slug:"/explanations/seeds",permalink:"/iota.rs/explanations/seeds",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/production/documentation/iota/external/iota.rs/production/documentation/docs/explanations/seeds.mdx",tags:[],version:"current",frontMatter:{description:"IOTA uses the `Ed25519` signature scheme and addresses are usually represented by Bech32 (checksummed base32) format string of 64 characters.",image:"/img/libraries/messages_in_tangle.svg",keywords:["explanation","seeds","ED2519","signature scheme","random seed","seed generator","private key"]},sidebar:"docs",previous:{title:"Getting Started with Wasm",permalink:"/iota.rs/getting_started/wasm"},next:{title:"Address/Key Space",permalink:"/iota.rs/explanations/address_key_space"}},p={},c=[{value:"Related Examples",id:"related-examples",level:2}],m={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"seeds"},"Seeds"),(0,a.kt)("p",null,"Since the IOTA network is permission-less, anybody is able to use it and interact with it. No central authority is\nrequired at any stage. So anybody is able to generate their own ",(0,a.kt)("inlineCode",{parentName:"p"},"seed")," and then deterministically generate the\nrespective private keys/addresses."),(0,a.kt)("p",null,"IOTA uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ed25519")," signature scheme and addresses are usually represented by Bech32 (checksummed base32) format\nstring of 64 characters."),(0,a.kt)("p",null,"A root of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ed25519")," signature scheme is basically a ",(0,a.kt)("inlineCode",{parentName:"p"},"32-byte (256-bit)")," uniformly randomly generated seed on which\nall private keys and corresponding addresses are generated. In the examples below, the seed is represented by a string\nof 64 characters using the ",(0,a.kt)("inlineCode",{parentName:"p"},"[0-9a-f]")," alphabet (32 bytes encoded in hexadecimal)."),(0,a.kt)(i,{mdxType:"SeedMnemonics"}),(0,a.kt)("h2",{id:"related-examples"},"Related Examples"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/iota.rs/examples/generate_seed"},"Generate Seed"))))}u.isMDXComponent=!0}}]);